{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/CakePool.sol": {
      "content": "    // SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/IMasterChefV2.sol\";\nimport \"./interfaces/IBoostContract.sol\";\nimport \"./interfaces/IVCake.sol\";\n\n\ncontract CakePool is Ownable, Pausable {\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        uint256 shares; // number of shares for a user.\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\n        uint256 cakeAtLastUserAction; // keep track of cake deposited at the last user action.\n        uint256 lastUserActionTime; // keep track of the last user action time.\n        uint256 lockStartTime; // lock start time.\n        uint256 lockEndTime; // lock end time.\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\n        bool locked; //lock status.\n        uint256 lockedAmount; // amount deposited during lock period.\n    }\n\n    IERC20 public immutable token; // cake token.\n\n    IMasterChefV2 public immutable masterchefV2;\n\n    address public boostContract; // boost contract used in Masterchef.\n    address public VCake;\n\n    mapping(address => UserInfo) public userInfo;\n    mapping(address => bool) public freePerformanceFeeUsers; // free performance fee users.\n    mapping(address => bool) public freeWithdrawFeeUsers; // free withdraw fee users.\n    mapping(address => bool) public freeOverdueFeeUsers; // free overdue fee users.\n\n    uint256 public totalShares;\n    address public admin;\n    address public treasury;\n    address public operator;\n    uint256 public cakePoolPID;\n    uint256 public totalBoostDebt; // total boost debt.\n    uint256 public totalLockedAmount; // total lock amount.\n\n    uint256 public constant MAX_PERFORMANCE_FEE = 2000; // 20%\n    uint256 public constant MAX_WITHDRAW_FEE = 500; // 5%\n    uint256 public constant MAX_OVERDUE_FEE = 100 * 1e10; // 100%\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 1 weeks; // 1 week\n    uint256 public constant MIN_LOCK_DURATION = 1 weeks; // 1 week\n    uint256 public constant MAX_LOCK_DURATION_LIMIT = 1000 days; // 1000 days\n    uint256 public constant BOOST_WEIGHT_LIMIT = 5000 * 1e10; // 5000%\n    uint256 public constant PRECISION_FACTOR = 1e12; // precision factor.\n    uint256 public constant PRECISION_FACTOR_SHARE = 1e28; // precision factor for share.\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 0.00001 ether;\n    uint256 public constant MIN_WITHDRAW_AMOUNT = 0.00001 ether;\n    uint256 public UNLOCK_FREE_DURATION = 1 weeks; // 1 week\n    uint256 public MAX_LOCK_DURATION = 365 days; // 365 days\n    uint256 public DURATION_FACTOR = 365 days; // 365 days, in order to calculate user additional boost.\n    uint256 public DURATION_FACTOR_OVERDUE = 180 days; // 180 days, in order to calculate overdue fee.\n    uint256 public BOOST_WEIGHT = 100 * 1e10; // 100%\n\n    uint256 public performanceFee = 200; // 2%\n    uint256 public performanceFeeContract = 200; // 2%\n    uint256 public withdrawFee = 10; // 0.1%\n    uint256 public withdrawFeeContract = 10; // 0.1%\n    uint256 public overdueFee = 100 * 1e10; // 100%\n    uint256 public withdrawFeePeriod = 72 hours; // 3 days\n\n    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 duration, uint256 lastDepositedTime);\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\n    event Harvest(address indexed sender, uint256 amount);\n    event Pause();\n    event Unpause();\n    event Init();\n    event Lock(\n        address indexed sender,\n        uint256 lockedAmount,\n        uint256 shares,\n        uint256 lockedDuration,\n        uint256 blockTimestamp\n    );\n    event Unlock(address indexed sender, uint256 amount, uint256 blockTimestamp);\n    event NewAdmin(address admin);\n    event NewTreasury(address treasury);\n    event NewOperator(address operator);\n    event NewBoostContract(address boostContract) ;\n    event NewVCakeContract(address VCake);\n    event FreeFeeUser(address indexed user, bool indexed free);\n    event NewPerformanceFee(uint256 performanceFee);\n    event NewPerformanceFeeContract(uint256 performanceFeeContract);\n    event NewWithdrawFee(uint256 withdrawFee);\n    event NewOverdueFee(uint256 overdueFee);\n    event NewWithdrawFeeContract(uint256 withdrawFeeContract);\n    event NewWithdrawFeePeriod(uint256 withdrawFeePeriod);\n    event NewMaxLockDuration(uint256 maxLockDuration);\n    event NewDurationFactor(uint256 durationFactor);\n    event NewDurationFactorOverdue(uint256 durationFactorOverdue);\n    event NewUnlockFreeDuration(uint256 unlockFreeDuration);\n    event NewBoostWeight(uint256 boostWeight);\n\n    /**\n     * @notice Constructor\n     * @param _token: Cake token contract\n     * @param _masterchefV2: MasterChefV2 contract\n     * @param _admin: address of the admin\n     * @param _treasury: address of the treasury (collects fees)\n     * @param _operator: address of operator\n     * @param _pid: cake pool ID in MasterChefV2\n     */\n    constructor(\n        IERC20 _token,\n        IMasterChefV2 _masterchefV2,\n        address _admin,\n        address _treasury,\n        address _operator,\n        uint256 _pid\n    ) {\n        token = _token;\n        masterchefV2 = _masterchefV2;\n        admin = _admin;\n        treasury = _treasury;\n        operator = _operator;\n        cakePoolPID = _pid;\n    }\n\n    /**\n     * @notice Deposits a dummy token to `MASTER_CHEF` MCV2.\n     * It will transfer all the `dummyToken` in the tx sender address.\n     * @param dummyToken The address of the token to be deposited into MCV2.\n     */\n    function init(IERC20 dummyToken) external onlyOwner {\n        uint256 balance = dummyToken.balanceOf(msg.sender);\n        require(balance != 0, \"Balance must exceed 0\");\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\n        dummyToken.approve(address(masterchefV2), balance);\n        masterchefV2.deposit(cakePoolPID, balance);\n        emit Init();\n    }\n\n    /**\n     * @notice Checks if the msg.sender is the admin address.\n     */\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"admin: wut?\");\n        _;\n    }\n\n    /**\n     * @notice Checks if the msg.sender is either the cake owner address or the operator address.\n     */\n    modifier onlyOperatorOrCakeOwner(address _user) {\n        require(msg.sender == _user || msg.sender == operator, \"Not operator or cake owner\");\n        _;\n    }\n\n    /**\n     * @notice Update user info in Boost Contract.\n     * @param _user: User address\n     */\n    function updateBoostContractInfo(address _user) internal {\n        if (boostContract != address(0)) {\n            UserInfo storage user = userInfo[_user];\n            uint256 lockDuration = user.lockEndTime - user.lockStartTime;\n            IBoostContract(boostContract).onCakePoolUpdate(\n                _user,\n                user.lockedAmount,\n                lockDuration,\n                totalLockedAmount,\n                DURATION_FACTOR\n            );\n        }\n    }\n\n    /**\n     * @notice Update user share When need to unlock or charges a fee.\n     * @param _user: User address\n     */\n    function updateUserShare(address _user) internal {\n        UserInfo storage user = userInfo[_user];\n        if (user.shares > 0) {\n            if (user.locked) {\n                // Calculate the user's current token amount and update related parameters.\n                uint256 currentAmount = (balanceOf() * (user.shares)) / totalShares - user.userBoostedShare;\n\n                totalBoostDebt -= user.userBoostedShare;\n                user.userBoostedShare = 0;\n                totalShares -= user.shares;\n                //Charge a overdue fee after the free duration has expired.\n                if (!freeOverdueFeeUsers[_user] && ((user.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)) {\n                    uint256 earnAmount = currentAmount - user.lockedAmount;\n                    uint256 overdueDuration = block.timestamp - user.lockEndTime - UNLOCK_FREE_DURATION;\n                    if (overdueDuration > DURATION_FACTOR_OVERDUE) {\n                        overdueDuration = DURATION_FACTOR_OVERDUE;\n                    }\n                    // Rates are calculated based on the user's overdue duration.\n                    uint256 overdueWeight = (overdueDuration * overdueFee) / DURATION_FACTOR_OVERDUE;\n                    uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\n                    token.safeTransfer(treasury, currentOverdueFee);\n                    currentAmount -= currentOverdueFee;\n                }\n                // Recalculate the user's share.\n                uint256 pool = balanceOf();\n                uint256 currentShares;\n\n\n\n                if (totalShares != 0) {\n                    currentShares = (currentAmount * totalShares) / (pool - currentAmount);\n                } else {\n                    currentShares = currentAmount;\n                }\n                user.shares = currentShares;\n                totalShares += currentShares;\n\n\n\n                // After the lock duration, update related parameters.\n                if (user.lockEndTime < block.timestamp) {\n                    user.locked = false;\n                    user.lockStartTime = 0;\n                    user.lockEndTime = 0;\n                    totalLockedAmount -= user.lockedAmount;\n                    user.lockedAmount = 0;\n                    emit Unlock(_user, currentAmount, block.timestamp);\n                }\n            } else if (!freePerformanceFeeUsers[_user]) {\n                // Calculate Performance fee.\n                uint256 totalAmount = (user.shares * balanceOf()) / totalShares;\n                totalShares -= user.shares;\n                user.shares = 0;\n                uint256 earnAmount = totalAmount - user.cakeAtLastUserAction;\n                uint256 feeRate = performanceFee;\n                if (_isContract(_user)) {\n                    feeRate = performanceFeeContract;\n                }\n                uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\n                if (currentPerformanceFee > 0) {\n                    token.safeTransfer(treasury, currentPerformanceFee);\n                    totalAmount -= currentPerformanceFee;\n                }\n                // Recalculate the user's share.\n                uint256 pool = balanceOf();\n                uint256 newShares;\n                if (totalShares != 0) {\n                    newShares = (totalAmount * totalShares) / (pool - totalAmount);\n                } else {\n                    newShares = totalAmount;\n                }\n                user.shares = newShares;\n                totalShares += newShares;\n            }\n        }\n    }\n\n    /**\n     * @notice Unlock user cake funds.\n     * @dev Only possible when contract not paused.\n     * @param _user: User address\n     */\n    function unlock(address _user) external onlyOperatorOrCakeOwner(_user) whenNotPaused {\n        UserInfo storage user = userInfo[_user];\n        require(user.locked && user.lockEndTime < block.timestamp, \"Cannot unlock yet\");\n        depositOperation(0, 0, _user);\n    }\n\n    /**\n     * @notice Deposit funds into the Cake Pool.\n     * @dev Only possible when contract not paused.\n     * @param _amount: number of tokens to deposit (in CAKE)\n     * @param _lockDuration: Token lock duration\n     */\n    function deposit(uint256 _amount, uint256 _lockDuration) external whenNotPaused {\n        require(_amount > 0 || _lockDuration > 0, \"Nothing to deposit\");\n        depositOperation(_amount, _lockDuration, msg.sender);\n    }\n\n    /**\n     * @notice The operation of deposite.\n     * @param _amount: number of tokens to deposit (in CAKE)\n     * @param _lockDuration: Token lock duration\n     * @param _user: User address\n     */\n    function depositOperation(\n        uint256 _amount,\n        uint256 _lockDuration,\n        address _user\n    ) internal {\n        UserInfo storage user = userInfo[_user];\n        if (user.shares == 0 || _amount > 0) {\n            require(_amount > MIN_DEPOSIT_AMOUNT, \"Deposit amount must be greater than MIN_DEPOSIT_AMOUNT\");\n        }\n        // Calculate the total lock duration and check whether the lock duration meets the conditions.\n        uint256 totalLockDuration = _lockDuration;\n        if (user.lockEndTime >= block.timestamp) {\n            // Adding funds during the lock duration is equivalent to re-locking the position, needs to update some variables.\n            if (_amount > 0) {\n                user.lockStartTime = block.timestamp;\n                totalLockedAmount -= user.lockedAmount;\n                user.lockedAmount = 0;\n            }\n            totalLockDuration += user.lockEndTime - user.lockStartTime;\n        }\n        require(_lockDuration == 0 || totalLockDuration >= MIN_LOCK_DURATION, \"Minimum lock period is one week\");\n        require(totalLockDuration <= MAX_LOCK_DURATION, \"Maximum lock period exceeded\");\n\n        if (VCake != address(0)) {\n            IVCake(VCake).deposit(_user, _amount, _lockDuration);\n        }\n\n        // Harvest tokens from Masterchef.\n        harvest();\n\n        // Handle stock funds.\n        if (totalShares == 0) {\n            uint256 stockAmount = available();\n            token.safeTransfer(treasury, stockAmount);\n        }\n        // Update user share.\n        updateUserShare(_user);\n\n        // Update lock duration.\n        if (_lockDuration > 0) {\n            if (user.lockEndTime < block.timestamp) {\n                user.lockStartTime = block.timestamp;\n                user.lockEndTime = block.timestamp + _lockDuration;\n            } else {\n                user.lockEndTime += _lockDuration;\n            }\n            user.locked = true;\n        }\n\n        uint256 currentShares;\n        uint256 currentAmount;\n        uint256 userCurrentLockedBalance;\n        uint256 pool = balanceOf();\n\n\n\n        if (_amount > 0) {\n            token.safeTransferFrom(_user, address(this), _amount);\n            currentAmount = _amount;\n        }\n\n        // Calculate lock funds\n        if (user.shares > 0 && user.locked) {\n            userCurrentLockedBalance = (pool * user.shares) / totalShares;\n\n            currentAmount += userCurrentLockedBalance;\n            totalShares -= user.shares;\n            user.shares = 0;\n\n            // Update lock amount\n            if (user.lockStartTime == block.timestamp) {\n                user.lockedAmount = userCurrentLockedBalance;\n                totalLockedAmount += user.lockedAmount;\n            }\n        }\n\n        if (totalShares != 0) {\n            currentShares = (currentAmount * totalShares) / (pool - userCurrentLockedBalance);\n        } else {\n            currentShares = currentAmount;\n        }\n\n\n\n        // Calculate the boost weight share.\n        if (user.lockEndTime > user.lockStartTime) {\n            // Calculate boost share.\n            uint256 boostWeight = ((user.lockEndTime - user.lockStartTime) * BOOST_WEIGHT) / DURATION_FACTOR;\n            uint256 boostShares = (boostWeight * currentShares) / PRECISION_FACTOR;\n            currentShares += boostShares;\n            user.shares += currentShares;\n\n            // Calculate boost share , the user only enjoys the reward, so the principal needs to be recorded as a debt.\n            uint256 userBoostedShare = (boostWeight * currentAmount) / PRECISION_FACTOR;\n            user.userBoostedShare += userBoostedShare;\n            totalBoostDebt += userBoostedShare;\n\n            // Update lock amount.\n            user.lockedAmount += _amount;\n            totalLockedAmount += _amount;\n\n            emit Lock(_user, user.lockedAmount, user.shares, (user.lockEndTime - user.lockStartTime), block.timestamp);\n        } else {\n            user.shares += currentShares;\n        }\n\n        if (_amount > 0 || _lockDuration > 0) {\n            user.lastDepositedTime = block.timestamp;\n        }\n        totalShares += currentShares;\n\n        user.cakeAtLastUserAction = (user.shares * balanceOf()) / totalShares - user.userBoostedShare;\n        user.lastUserActionTime = block.timestamp;\n\n        // Update user info in Boost Contract.\n        updateBoostContractInfo(_user);\n\n        emit Deposit(_user, _amount, currentShares, _lockDuration, block.timestamp);\n    }\n\n    /**\n     * @notice Withdraw funds from the Cake Pool.\n     * @param _amount: Number of amount to withdraw\n     */\n    function withdrawByAmount(uint256 _amount) public whenNotPaused {\n        require(_amount > MIN_WITHDRAW_AMOUNT, \"Withdraw amount must be greater than MIN_WITHDRAW_AMOUNT\");\n        withdrawOperation(0, _amount);\n    }\n\n    /**\n     * @notice Withdraw funds from the Cake Pool.\n     * @param _shares: Number of shares to withdraw\n     */\n    function withdraw(uint256 _shares) public whenNotPaused {\n        require(_shares > 0, \"Nothing to withdraw\");\n        withdrawOperation(_shares, 0);\n    }\n\n    /**\n     * @notice The operation of withdraw.\n     * @param _shares: Number of shares to withdraw\n     * @param _amount: Number of amount to withdraw\n     */\n    function withdrawOperation(uint256 _shares, uint256 _amount) internal {\n        UserInfo storage user = userInfo[msg.sender];\n        require(_shares <= user.shares, \"Withdraw amount exceeds balance\");\n        require(user.lockEndTime < block.timestamp, \"Still in lock\");\n\n        if (VCake != address(0)) {\n            IVCake(VCake).withdraw(msg.sender);\n        }\n\n        // Calculate the percent of withdraw shares, when unlocking or calculating the Performance fee, the shares will be updated.\n        uint256 currentShare = _shares;\n        uint256 sharesPercent = (_shares * PRECISION_FACTOR_SHARE) / user.shares;\n\n        // Harvest token from MasterchefV2.\n        harvest();\n\n        // Update user share.\n        updateUserShare(msg.sender);\n\n        if (_shares == 0 && _amount > 0) {\n            uint256 pool = balanceOf();\n            currentShare = (_amount * totalShares) / pool; // Calculate equivalent shares\n            if (currentShare > user.shares) {\n                currentShare = user.shares;\n            }\n        } else {\n            currentShare = (sharesPercent * user.shares) / PRECISION_FACTOR_SHARE;\n        }\n        \n        uint256 currentAmount = (balanceOf() * currentShare) / totalShares;\n        user.shares -= currentShare;\n        totalShares -= currentShare;\n\n        // Calculate withdraw fee\n        if (!freeWithdrawFeeUsers[msg.sender] && (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)) {\n            uint256 feeRate = withdrawFee;\n            if (_isContract(msg.sender)) {\n                feeRate = withdrawFeeContract;\n            }\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\n            token.safeTransfer(treasury, currentWithdrawFee);\n            currentAmount -= currentWithdrawFee;\n        }\n\n        token.safeTransfer(msg.sender, currentAmount);\n\n        if (user.shares > 0) {\n            user.cakeAtLastUserAction = (user.shares * balanceOf()) / totalShares;\n        } else {\n            user.cakeAtLastUserAction = 0;\n        }\n\n        user.lastUserActionTime = block.timestamp;\n\n        // Update user info in Boost Contract.\n        updateBoostContractInfo(msg.sender);\n\n        emit Withdraw(msg.sender, currentAmount, currentShare);\n    }\n\n    /**\n     * @notice Withdraw all funds for a user\n     */\n    function withdrawAll() external {\n        withdraw(userInfo[msg.sender].shares);\n    }\n\n    /**\n     * @notice Harvest pending CAKE tokens from MasterChef\n     */\n    function harvest() internal {\n        uint256 pendingCake = masterchefV2.pendingCake(cakePoolPID, address(this));\n        if (pendingCake > 0) {\n            uint256 balBefore = available();\n            masterchefV2.withdraw(cakePoolPID, 0);\n            uint256 balAfter = available();\n            emit Harvest(msg.sender, (balAfter - balBefore));\n        }\n    }\n\n    /**\n     * @notice Set admin address\n     * @dev Only callable by the contract owner.\n     */\n    function setAdmin(address _admin) external onlyOwner {\n        require(_admin != address(0), \"Cannot be zero address\");\n        admin = _admin;\n        emit NewAdmin(admin);\n    }\n\n    /**\n     * @notice Set treasury address\n     * @dev Only callable by the contract owner.\n     */\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"Cannot be zero address\");\n        treasury = _treasury;\n        emit NewTreasury(treasury);\n    }\n\n    /**\n     * @notice Set operator address\n     * @dev Callable by the contract owner.\n     */\n    function setOperator(address _operator) external onlyOwner {\n        require(_operator != address(0), \"Cannot be zero address\");\n        operator = _operator;\n        emit NewOperator(operator);\n    }\n\n    /**\n     * @notice Set Boost Contract address\n     * @dev Callable by the contract admin.\n     */\n    function setBoostContract(address _boostContract) external onlyAdmin {\n        require(_boostContract != address(0), \"Cannot be zero address\");\n        boostContract = _boostContract;\n        emit NewBoostContract(boostContract);\n    }\n\n    /**\n     * @notice Set VCake Contract address\n     * @dev Callable by the contract admin.\n     */\n    function setVCakeContract(address _VCake) external onlyAdmin {\n        require(_VCake != address(0), \"Cannot be zero address\");\n        VCake = _VCake;\n        emit NewVCakeContract(VCake);\n    }\n\n    /**\n     * @notice Set free performance fee address\n     * @dev Only callable by the contract admin.\n     * @param _user: User address\n     * @param _free: true:free false:not free\n     */\n    function setFreePerformanceFeeUser(address _user, bool _free) external onlyAdmin {\n        require(_user != address(0), \"Cannot be zero address\");\n        freePerformanceFeeUsers[_user] = _free;\n        emit FreeFeeUser(_user, _free);\n    }\n\n    /**\n     * @notice Set free overdue fee address\n     * @dev Only callable by the contract admin.\n     * @param _user: User address\n     * @param _free: true:free false:not free\n     */\n    function setOverdueFeeUser(address _user, bool _free) external onlyAdmin {\n        require(_user != address(0), \"Cannot be zero address\");\n        freeOverdueFeeUsers[_user] = _free;\n        emit FreeFeeUser(_user, _free);\n    }\n\n    /**\n     * @notice Set free withdraw fee address\n     * @dev Only callable by the contract admin.\n     * @param _user: User address\n     * @param _free: true:free false:not free\n     */\n    function setWithdrawFeeUser(address _user, bool _free) external onlyAdmin {\n        require(_user != address(0), \"Cannot be zero address\");\n        freeWithdrawFeeUsers[_user] = _free;\n        emit FreeFeeUser(_user, _free);\n    }\n\n    /**\n     * @notice Set performance fee\n     * @dev Only callable by the contract admin.\n     */\n    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {\n        require(_performanceFee <= MAX_PERFORMANCE_FEE, \"performanceFee cannot be more than MAX_PERFORMANCE_FEE\");\n        performanceFee = _performanceFee;\n        emit NewPerformanceFee(performanceFee);\n    }\n\n    /**\n     * @notice Set performance fee for contract\n     * @dev Only callable by the contract admin.\n     */\n    function setPerformanceFeeContract(uint256 _performanceFeeContract) external onlyAdmin {\n        require(\n            _performanceFeeContract <= MAX_PERFORMANCE_FEE,\n            \"performanceFee cannot be more than MAX_PERFORMANCE_FEE\"\n        );\n        performanceFeeContract = _performanceFeeContract;\n        emit NewPerformanceFeeContract(performanceFeeContract);\n    }\n\n    /**\n     * @notice Set withdraw fee\n     * @dev Only callable by the contract admin.\n     */\n    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, \"withdrawFee cannot be more than MAX_WITHDRAW_FEE\");\n        withdrawFee = _withdrawFee;\n        emit NewWithdrawFee(withdrawFee);\n    }\n\n    /**\n     * @notice Set overdue fee\n     * @dev Only callable by the contract admin.\n     */\n    function setOverdueFee(uint256 _overdueFee) external onlyAdmin {\n        require(_overdueFee <= MAX_OVERDUE_FEE, \"overdueFee cannot be more than MAX_OVERDUE_FEE\");\n        overdueFee = _overdueFee;\n        emit NewOverdueFee(_overdueFee);\n    }\n\n    /**\n     * @notice Set withdraw fee for contract\n     * @dev Only callable by the contract admin.\n     */\n    function setWithdrawFeeContract(uint256 _withdrawFeeContract) external onlyAdmin {\n        require(_withdrawFeeContract <= MAX_WITHDRAW_FEE, \"withdrawFee cannot be more than MAX_WITHDRAW_FEE\");\n        withdrawFeeContract = _withdrawFeeContract;\n        emit NewWithdrawFeeContract(withdrawFeeContract);\n    }\n\n    /**\n     * @notice Set withdraw fee period\n     * @dev Only callable by the contract admin.\n     */\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyAdmin {\n        require(\n            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,\n            \"withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD\"\n        );\n        withdrawFeePeriod = _withdrawFeePeriod;\n        emit NewWithdrawFeePeriod(withdrawFeePeriod);\n    }\n\n    /**\n     * @notice Set MAX_LOCK_DURATION\n     * @dev Only callable by the contract admin.\n     */\n    function setMaxLockDuration(uint256 _maxLockDuration) external onlyAdmin {\n        require(\n            _maxLockDuration <= MAX_LOCK_DURATION_LIMIT,\n            \"MAX_LOCK_DURATION cannot be more than MAX_LOCK_DURATION_LIMIT\"\n        );\n        MAX_LOCK_DURATION = _maxLockDuration;\n        emit NewMaxLockDuration(_maxLockDuration);\n    }\n\n    /**\n     * @notice Set DURATION_FACTOR\n     * @dev Only callable by the contract admin.\n     */\n    function setDurationFactor(uint256 _durationFactor) external onlyAdmin {\n        require(_durationFactor > 0, \"DURATION_FACTOR cannot be zero\");\n        DURATION_FACTOR = _durationFactor;\n        emit NewDurationFactor(_durationFactor);\n    }\n\n    /**\n     * @notice Set DURATION_FACTOR_OVERDUE\n     * @dev Only callable by the contract admin.\n     */\n    function setDurationFactorOverdue(uint256 _durationFactorOverdue) external onlyAdmin {\n        require(_durationFactorOverdue > 0, \"DURATION_FACTOR_OVERDUE cannot be zero\");\n        DURATION_FACTOR_OVERDUE = _durationFactorOverdue;\n        emit NewDurationFactorOverdue(_durationFactorOverdue);\n    }\n\n    /**\n     * @notice Set UNLOCK_FREE_DURATION\n     * @dev Only callable by the contract admin.\n     */\n    function setUnlockFreeDuration(uint256 _unlockFreeDuration) external onlyAdmin {\n        require(_unlockFreeDuration > 0, \"UNLOCK_FREE_DURATION cannot be zero\");\n        UNLOCK_FREE_DURATION = _unlockFreeDuration;\n        emit NewUnlockFreeDuration(_unlockFreeDuration);\n    }\n\n    /**\n     * @notice Set BOOST_WEIGHT\n     * @dev Only callable by the contract admin.\n     */\n    function setBoostWeight(uint256 _boostWeight) external onlyAdmin {\n        require(_boostWeight <= BOOST_WEIGHT_LIMIT, \"BOOST_WEIGHT cannot be more than BOOST_WEIGHT_LIMIT\");\n        BOOST_WEIGHT = _boostWeight;\n        emit NewBoostWeight(_boostWeight);\n    }\n\n    /**\n     * @notice Withdraw unexpected tokens sent to the Cake Pool\n     */\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\n        require(_token != address(token), \"Token cannot be same as deposit token\");\n\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(msg.sender, amount);\n    }\n\n    /**\n     * @notice Trigger stopped state\n     * @dev Only possible when contract not paused.\n     */\n    function pause() external onlyAdmin whenNotPaused {\n        _pause();\n        emit Pause();\n    }\n\n    /**\n     * @notice Return to normal state\n     * @dev Only possible when contract is paused.\n     */\n    function unpause() external onlyAdmin whenPaused {\n        _unpause();\n        emit Unpause();\n    }\n\n    /**\n     * @notice Calculate Performance fee.\n     * @param _user: User address\n     * @return Returns Performance fee.\n     */\n    function calculatePerformanceFee(address _user) public view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        if (user.shares > 0 && !user.locked && !freePerformanceFeeUsers[_user]) {\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\n            uint256 totalAmount = (user.shares * pool) / totalShares;\n            uint256 earnAmount = totalAmount - user.cakeAtLastUserAction;\n            uint256 feeRate = performanceFee;\n            if (_isContract(_user)) {\n                feeRate = performanceFeeContract;\n            }\n            uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\n            return currentPerformanceFee;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Calculate overdue fee.\n     * @param _user: User address\n     * @return Returns Overdue fee.\n     */\n    function calculateOverdueFee(address _user) public view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        if (\n            user.shares > 0 &&\n            user.locked &&\n            !freeOverdueFeeUsers[_user] &&\n            ((user.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)\n        ) {\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\n            uint256 currentAmount = (pool * (user.shares)) / totalShares - user.userBoostedShare;\n            uint256 earnAmount = currentAmount - user.lockedAmount;\n            uint256 overdueDuration = block.timestamp - user.lockEndTime - UNLOCK_FREE_DURATION;\n            if (overdueDuration > DURATION_FACTOR_OVERDUE) {\n                overdueDuration = DURATION_FACTOR_OVERDUE;\n            }\n            // Rates are calculated based on the user's overdue duration.\n            uint256 overdueWeight = (overdueDuration * overdueFee) / DURATION_FACTOR_OVERDUE;\n            uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\n            return currentOverdueFee;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Calculate Performance Fee Or Overdue Fee\n     * @param _user: User address\n     * @return Returns  Performance Fee Or Overdue Fee.\n     */\n    function calculatePerformanceFeeOrOverdueFee(address _user) internal view returns (uint256) {\n        return calculatePerformanceFee(_user) + calculateOverdueFee(_user);\n    }\n\n    /**\n     * @notice Calculate withdraw fee.\n     * @param _user: User address\n     * @param _shares: Number of shares to withdraw\n     * @return Returns Withdraw fee.\n     */\n    function calculateWithdrawFee(address _user, uint256 _shares) public view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        if (user.shares < _shares) {\n            _shares = user.shares;\n        }\n        if (!freeWithdrawFeeUsers[msg.sender] && (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)) {\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\n            uint256 sharesPercent = (_shares * PRECISION_FACTOR) / user.shares;\n            uint256 currentTotalAmount = (pool * (user.shares)) /\n                totalShares -\n                user.userBoostedShare -\n                calculatePerformanceFeeOrOverdueFee(_user);\n            uint256 currentAmount = (currentTotalAmount * sharesPercent) / PRECISION_FACTOR;\n            uint256 feeRate = withdrawFee;\n            if (_isContract(msg.sender)) {\n                feeRate = withdrawFeeContract;\n            }\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\n            return currentWithdrawFee;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Calculates the total pending rewards that can be harvested\n     * @return Returns total pending cake rewards\n     */\n    function calculateTotalPendingCakeRewards() public view returns (uint256) {\n        uint256 amount = masterchefV2.pendingCake(cakePoolPID, address(this));\n        return amount;\n    }\n\n    function getPricePerFullShare() external view returns (uint256) {\n        return totalShares == 0 ? 1e18 : (((balanceOf() + calculateTotalPendingCakeRewards()) * (1e18)) / totalShares);\n    }\n\n    /**\n     * @notice Current pool available balance\n     * @dev The contract puts 100% of the tokens to work.\n     */\n    function available() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculates the total underlying tokens\n     * @dev It includes tokens held by the contract and the boost debt amount.\n     */\n    function balanceOf() public view returns (uint256) {\n        return token.balanceOf(address(this)) + totalBoostDebt;\n    }\n\n    /**\n     * @notice Checks if address is a contract\n     */\n    function _isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n}"
    },
    "contracts/FarmBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IBEP20.sol\";\nimport \"./interfaces/ICakePool.sol\";\nimport \"./interfaces/IMasterChefV2.sol\";\nimport \"./libraries/IterableMapping.sol\";\n\ncontract FarmBooster is Ownable {\n    using IterableMapping for ItMap;\n\n    /// @notice cake token.\n    address public immutable CAKE;\n    /// @notice cake pool.\n    address public immutable CAKE_POOL;\n    /// @notice MCV2 contract.\n    address public immutable MASTER_CHEF;\n    /// @notice boost proxy factory.\n    address public BOOSTER_FACTORY;\n\n    /// @notice Maximum allowed boosted pool numbers\n    uint256 public MAX_BOOST_POOL;\n    /// @notice limit max boost\n    uint256 public cA;\n    /// @notice include 1e4\n    uint256 public constant MIN_CA = 1e4;\n    /// @notice include 1e5\n    uint256 public constant MAX_CA = 1e5;\n    /// @notice cA precision\n    uint256 public constant CA_PRECISION = 1e5;\n    /// @notice controls difficulties\n    uint256 public cB;\n    /// @notice not include 0\n    uint256 public constant MIN_CB = 0;\n    /// @notice include 50\n    uint256 public constant MAX_CB = 50;\n    /// @notice MCV2 basic boost factor, none boosted user's boost factor\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\n    /// @notice MCV2 Hard limit for maxmium boost factor\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\n    /// @notice Average boost ratio precion\n    uint256 public constant BOOST_RATIO_PRECISION = 1e5;\n    /// @notice Cake pool BOOST_WEIGHT precision\n    uint256 public constant BOOST_WEIGHT_PRECISION = 100 * 1e10; // 100%\n\n    /// @notice The whitelist of pools allowed for farm boosting.\n    mapping(uint256 => bool) public whiteList;\n    /// @notice The boost proxy contract mapping(user => proxy).\n    mapping(address => address) public proxyContract;\n    /// @notice Info of each pool user.\n    mapping(address => ItMap) public userInfo;\n\n    event UpdateMaxBoostPool(uint256 factory);\n    event UpdateBoostFactory(address factory);\n    event UpdateCA(uint256 oldCA, uint256 newCA);\n    event UpdateCB(uint256 oldCB, uint256 newCB);\n    event Refresh(address indexed user, address proxy, uint256 pid);\n    event UpdateBoostFarms(uint256 pid, bool status);\n    event ActiveFarmPool(address indexed user, address proxy, uint256 pid);\n    event DeactiveFarmPool(address indexed user, address proxy, uint256 pid);\n    event UpdateBoostProxy(address indexed user, address proxy);\n    event UpdatePoolBoostMultiplier(address indexed user, uint256 pid, uint256 oldMultiplier, uint256 newMultiplier);\n    event UpdateCakePool(\n        address indexed user,\n        uint256 lockedAmount,\n        uint256 lockedDuration,\n        uint256 totalLockedAmount,\n        uint256 maxLockDuration\n    );\n\n    /// @param _cake CAKE token contract address.\n    /// @param _cakePool Cake Pool contract address.\n    /// @param _v2 MasterChefV2 contract address.\n    /// @param _max Maximum allowed boosted farm  quantity\n    /// @param _cA Limit max boost\n    /// @param _cB Controls difficulties\n    constructor(\n        address _cake,\n        address _cakePool,\n        address _v2,\n        uint256 _max,\n        uint256 _cA,\n        uint256 _cB\n    ) {\n        require(\n            _max > 0 && _cA >= MIN_CA && _cA <= MAX_CA && _cB > MIN_CB && _cB <= MAX_CB,\n            \"constructor: Invalid parameter\"\n        );\n        CAKE = _cake;\n        CAKE_POOL = _cakePool;\n        MASTER_CHEF = _v2;\n        MAX_BOOST_POOL = _max;\n        cA = _cA;\n        cB = _cB;\n    }\n\n    /// @notice Checks if the msg.sender is a contract or a proxy\n    modifier notContract() {\n        require(!_isContract(msg.sender), \"contract not allowed\");\n        require(msg.sender == tx.origin, \"proxy contract not allowed\");\n        _;\n    }\n\n    /// @notice Checks if the msg.sender is the FarmBooster Factory.\n    modifier onlyFactory() {\n        require(msg.sender == BOOSTER_FACTORY, \"onlyFactory: Not factory\");\n        _;\n    }\n\n    /// @notice Checks if the msg.sender is the FarmBooster Proxy.\n    modifier onlyProxy(address _user) {\n        require(msg.sender == proxyContract[_user], \"onlyProxy: Not proxy\");\n        _;\n    }\n\n    /// @notice Checks if the msg.sender is the cake pool.\n    modifier onlyCakePool() {\n        require(msg.sender == CAKE_POOL, \"onlyCakePool: Not cake pool\");\n        _;\n    }\n\n    /// @notice set maximum allowed boosted pool numbers.\n    function setMaxBoostPool(uint256 _max) external onlyOwner {\n        require(_max > 0, \"setMaxBoostPool: Maximum boost pool should greater than 0\");\n        MAX_BOOST_POOL = _max;\n        emit UpdateMaxBoostPool(_max);\n    }\n\n    /// @notice set boost factory contract.\n    function setBoostFactory(address _factory) external onlyOwner {\n        require(_factory != address(0), \"setBoostFactory: Invalid factory\");\n        BOOSTER_FACTORY = _factory;\n\n        emit UpdateBoostFactory(_factory);\n    }\n\n    /// @notice Set user boost proxy contract, can only invoked by boost contract.\n    /// @param _user boost user address.\n    /// @param _proxy boost proxy contract.\n    function setProxy(address _user, address _proxy) external onlyFactory {\n        require(_proxy != address(0), \"setProxy: Invalid proxy address\");\n        require(proxyContract[_user] == address(0), \"setProxy: User has already set proxy\");\n\n        proxyContract[_user] = _proxy;\n\n        emit UpdateBoostProxy(_user, _proxy);\n    }\n\n    /// @notice Only allow whitelisted pids for farm boosting\n    /// @param _pid pool id(MasterchefV2 pool).\n    /// @param _status farm pool allowed boosted or not\n    function setBoosterFarms(uint256 _pid, bool _status) external onlyOwner {\n        whiteList[_pid] = _status;\n        emit UpdateBoostFarms(_pid, _status);\n    }\n\n    /// @notice limit max boost\n    /// @param _cA max boost\n    function setCA(uint256 _cA) external onlyOwner {\n        require(_cA >= MIN_CA && _cA <= MAX_CA, \"setCA: Invalid cA\");\n        uint256 temp = cA;\n        cA = _cA;\n        emit UpdateCA(temp, cA);\n    }\n\n    /// @notice controls difficulties\n    /// @param _cB difficulties\n    function setCB(uint256 _cB) external onlyOwner {\n        require(_cB > MIN_CB && _cB <= MAX_CB, \"setCB: Invalid cB\");\n        uint256 temp = cB;\n        cB = _cB;\n        emit UpdateCB(temp, cB);\n    }\n\n    /// @notice Cakepool operation(deposit/withdraw) automatically call this function.\n    /// @param _user user address.\n    /// @param _lockedAmount user locked amount in cake pool.\n    /// @param _lockedDuration user locked duration in cake pool.\n    /// @param _totalLockedAmount Total locked cake amount in cake pool.\n    /// @param _maxLockDuration maximum locked duration in cake pool.\n    function onCakePoolUpdate(\n        address _user,\n        uint256 _lockedAmount,\n        uint256 _lockedDuration,\n        uint256 _totalLockedAmount,\n        uint256 _maxLockDuration\n    ) external onlyCakePool {\n        address proxy = proxyContract[_user];\n        ItMap storage itmap = userInfo[proxy];\n        uint256 avgDuration;\n        bool flag;\n        for (uint256 i = 0; i < itmap.keys.length; i++) {\n            uint256 pid = itmap.keys[i];\n            if (!flag) {\n                avgDuration = avgLockDuration();\n                flag = true;\n            }\n            _updateBoostMultiplier(_user, proxy, pid, avgDuration);\n        }\n\n        emit UpdateCakePool(_user, _lockedAmount, _lockedDuration, _totalLockedAmount, _maxLockDuration);\n    }\n\n    /// @notice Update user boost multiplier in V2 pool,only for proxy.\n    /// @param _user user address.\n    /// @param _pid pool id in MasterchefV2 pool.\n    function updatePoolBoostMultiplier(address _user, uint256 _pid) public onlyProxy(_user) {\n        // if user not actived this farm, just return.\n        if (!userInfo[msg.sender].contains(_pid)) return;\n        _updateBoostMultiplier(_user, msg.sender, _pid, avgLockDuration());\n    }\n\n    /// @notice Active user farm pool.\n    /// @param _pid pool id(MasterchefV2 pool).\n    function activate(uint256 _pid) external {\n        address proxy = proxyContract[msg.sender];\n        require(whiteList[_pid] && proxy != address(0), \"activate: Not boosted farm pool\");\n\n        ItMap storage itmap = userInfo[proxy];\n        require(itmap.keys.length < MAX_BOOST_POOL, \"activate: Boosted farms reach to MAX\");\n\n        _updateBoostMultiplier(msg.sender, proxy, _pid, avgLockDuration());\n\n        emit ActiveFarmPool(msg.sender, proxy, _pid);\n    }\n\n    /// @notice Deactive user farm pool.\n    /// @param _pid pool id(MasterchefV2 pool).\n    function deactive(uint256 _pid) external {\n        address proxy = proxyContract[msg.sender];\n        ItMap storage itmap = userInfo[proxy];\n        require(itmap.contains(_pid), \"deactive: None boost user\");\n\n        if (itmap.data[_pid] > BOOST_PRECISION) {\n            IMasterChefV2(MASTER_CHEF).updateBoostMultiplier(proxy, _pid, BOOST_PRECISION);\n        }\n        itmap.remove(_pid);\n\n        emit DeactiveFarmPool(msg.sender, proxy, _pid);\n    }\n\n    /// @notice Anyone can refesh sepecific user boost multiplier\n    /// @param _user user address.\n    /// @param _pid pool id(MasterchefV2 pool).\n    function refresh(address _user, uint256 _pid) external notContract {\n        address proxy = proxyContract[_user];\n        ItMap storage itmap = userInfo[proxy];\n        require(itmap.contains(_pid), \"refresh: None boost user\");\n\n        _updateBoostMultiplier(_user, proxy, _pid, avgLockDuration());\n\n        emit Refresh(_user, proxy, _pid);\n    }\n\n    /// @notice Whether user boosted specific farm pool.\n    /// @param _user user address.\n    /// @param _pid pool id(MasterchefV2 pool).\n    function isBoostedPool(address _user, uint256 _pid) external view returns (bool) {\n        return userInfo[proxyContract[_user]].contains(_pid);\n    }\n\n    /// @notice Actived farm pool list.\n    /// @param _user user address.\n    function activedPools(address _user) external view returns (uint256[] memory pools) {\n        ItMap storage itmap = userInfo[proxyContract[_user]];\n        if (itmap.keys.length == 0) return pools;\n\n        pools = new uint256[](itmap.keys.length);\n        // solidity for-loop not support multiple variables initializae by ',' separate.\n        uint256 i;\n        for (uint256 index = 0; index < itmap.keys.length; index++) {\n            uint256 pid = itmap.keys[index];\n            pools[i] = pid;\n            i++;\n        }\n    }\n\n    /// @notice Anyone can call this function, if you find some guys effectived multiplier is not fair\n    /// for other users, just call 'refresh' function.\n    /// @param _user user address.\n    /// @param _pid pool id(MasterchefV2 pool).\n    /// @dev If return value not in range [BOOST_PRECISION, MAX_BOOST_PRECISION]\n    /// the actual effectived multiplier will be the close to side boundry value.\n    function getUserMultiplier(address _user, uint256 _pid) external view returns (uint256) {\n        return _boostCalculate(_user, proxyContract[_user], _pid, avgLockDuration());\n    }\n\n    /// @notice cake pool average locked duration calculator.\n    function avgLockDuration() public view returns (uint256) {\n        uint256 totalStakedAmount = IBEP20(CAKE).balanceOf(CAKE_POOL);\n\n        uint256 totalLockedAmount = ICakePool(CAKE_POOL).totalLockedAmount();\n\n        uint256 pricePerFullShare = ICakePool(CAKE_POOL).getPricePerFullShare();\n\n        uint256 flexibleShares = ((totalStakedAmount - totalLockedAmount) * 1e18) / pricePerFullShare;\n        if (flexibleShares == 0) return 0;\n\n        uint256 originalShares = (totalLockedAmount * 1e18) / pricePerFullShare;\n        if (originalShares == 0) return 0;\n\n        uint256 boostedRatio = ((ICakePool(CAKE_POOL).totalShares() - flexibleShares) * BOOST_RATIO_PRECISION) /\n            originalShares;\n        if (boostedRatio <= BOOST_RATIO_PRECISION) return 0;\n\n        uint256 boostWeight = ICakePool(CAKE_POOL).BOOST_WEIGHT();\n        uint256 maxLockDuration = ICakePool(CAKE_POOL).MAX_LOCK_DURATION() * BOOST_RATIO_PRECISION;\n\n        uint256 duration = ((boostedRatio - BOOST_RATIO_PRECISION) * 365 * BOOST_WEIGHT_PRECISION) / boostWeight;\n        return duration <= maxLockDuration ? duration : maxLockDuration;\n    }\n\n    /// @param _user user address.\n    /// @param _proxy proxy address corresponding to the user.\n    /// @param _pid pool id.\n    /// @param _duration cake pool average locked duration.\n    function _updateBoostMultiplier(\n        address _user,\n        address _proxy,\n        uint256 _pid,\n        uint256 _duration\n    ) internal {\n        ItMap storage itmap = userInfo[_proxy];\n\n        // Used to be boost farm pool and current is not, remove from mapping\n        if (!whiteList[_pid]) {\n            if (itmap.data[_pid] > BOOST_PRECISION) {\n                // reset to BOOST_PRECISION\n                IMasterChefV2(MASTER_CHEF).updateBoostMultiplier(_proxy, _pid, BOOST_PRECISION);\n            }\n            itmap.remove(_pid);\n            return;\n        }\n\n        uint256 prevMultiplier = IMasterChefV2(MASTER_CHEF).getBoostMultiplier(_proxy, _pid);\n        uint256 multiplier = _boostCalculate(_user, _proxy, _pid, _duration);\n\n        if (multiplier < BOOST_PRECISION) {\n            multiplier = BOOST_PRECISION;\n        } else if (multiplier > MAX_BOOST_PRECISION) {\n            multiplier = MAX_BOOST_PRECISION;\n        }\n\n        // Update multiplier to MCV2\n        if (multiplier != prevMultiplier) {\n            IMasterChefV2(MASTER_CHEF).updateBoostMultiplier(_proxy, _pid, multiplier);\n        }\n        itmap.insert(_pid, multiplier);\n\n        emit UpdatePoolBoostMultiplier(_user, _pid, prevMultiplier, multiplier);\n    }\n\n    /// @param _user user address.\n    /// @param _proxy proxy address corresponding to the user.\n    /// @param _pid pool id(MasterchefV2 pool).\n    /// @param _duration cake pool average locked duration.\n    function _boostCalculate(\n        address _user,\n        address _proxy,\n        uint256 _pid,\n        uint256 _duration\n    ) internal view returns (uint256) {\n        if (_duration == 0) return BOOST_PRECISION;\n\n        (uint256 lpBalance, , ) = IMasterChefV2(MASTER_CHEF).userInfo(_pid, _proxy);\n        uint256 dB = (cA * lpBalance) / CA_PRECISION;\n        // dB == 0 means lpBalance close to 0\n        if (lpBalance == 0 || dB == 0) return BOOST_PRECISION;\n\n        (, , , , uint256 lockStartTime, uint256 lockEndTime, , , uint256 userLockedAmount) = ICakePool(CAKE_POOL)\n            .userInfo(_user);\n        if (userLockedAmount == 0 || block.timestamp >= lockEndTime) return BOOST_PRECISION;\n\n        // userLockedAmount > 0 means totalLockedAmount > 0\n        uint256 totalLockedAmount = ICakePool(CAKE_POOL).totalLockedAmount();\n\n        IBEP20 lp = IBEP20(IMasterChefV2(MASTER_CHEF).lpToken(_pid));\n        uint256 userLockedDuration = (lockEndTime - lockStartTime) / (3600 * 24); // days\n\n        uint256 aB = (((lp.balanceOf(MASTER_CHEF) * userLockedAmount * userLockedDuration) * BOOST_RATIO_PRECISION) /\n            cB) / (totalLockedAmount * _duration);\n\n        // should '*' BOOST_PRECISION\n        return ((lpBalance < (dB + aB) ? lpBalance : (dB + aB)) * BOOST_PRECISION) / dB;\n    }\n\n    /// @notice Checks if address is a contract\n    /// @dev It prevents contract from being targetted\n    function _isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n}"
    },
    "contracts/FarmBoosterProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IMasterChefV2.sol\";\nimport \"./interfaces/IFarmBooster.sol\";\n\ncontract FarmBoosterProxy is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // The address of the farm booster proxy factory\n    address public immutable FARM_BOOSTER_PROXY_FACTORY;\n    IMasterChefV2 public masterchefV2;\n    IERC20 public cakeToken;\n    IFarmBooster public farmBooster;\n\n    address public admin;\n    // Whether it is initialized\n    bool public isInitialized;\n    // Record whether lp was approved\n    mapping(address => bool) public lpApproved;\n\n    event DepositByProxy(address indexed user, address indexed proxy, uint256 indexed pid, uint256 amount);\n    event WithdrawByProxy(address indexed user, address indexed proxy, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdrawByProxy(address indexed user, address indexed proxy, uint256 indexed pid);\n\n    /**\n     * @notice Constructor\n     */\n    constructor() {\n        FARM_BOOSTER_PROXY_FACTORY = msg.sender;\n    }\n\n    /**\n     * @notice Checks if the msg.sender is the admin address.\n     */\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"admin: wut?\");\n        _;\n    }\n\n    /**\n     * @notice It initializes the contract\n     * @dev It can only be called once.\n     * @param _admin: the admin address\n     * @param _farmBooster: the farm booster address\n     * @param _masterchefV2: the address of the Masterchef V2\n     * @param _cakeToken: the address of the cake token\n     */\n    function initialize(\n        address _admin,\n        address _farmBooster,\n        address _masterchefV2,\n        address _cakeToken\n    ) external {\n        require(!isInitialized, \"Operations: Already initialized\");\n        require(msg.sender == FARM_BOOSTER_PROXY_FACTORY, \"Operations: Not factory\");\n\n        // Make this contract initialized\n        isInitialized = true;\n        admin = _admin;\n        farmBooster = IFarmBooster(_farmBooster);\n        masterchefV2 = IMasterChefV2(_masterchefV2);\n        cakeToken = IERC20(_cakeToken);\n    }\n\n    /**\n     * @notice Deposit LP tokens to pool.\n     * @dev It can only be called by admin.\n     * @param _pid The id of the pool.\n     * @param _amount Amount of LP tokens to deposit.\n     */\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant onlyAdmin {\n        uint256 poolLength = masterchefV2.poolLength();\n        require(_pid < poolLength, \"Pool is not exist\");\n        address lpAddress = masterchefV2.lpToken(_pid);\n        IERC20(lpAddress).safeTransferFrom(msg.sender, address(this), _amount);\n        if (!lpApproved[lpAddress]) {\n            IERC20(lpAddress).approve(address(masterchefV2), type(uint256).max);\n            lpApproved[lpAddress] = true;\n        }\n        masterchefV2.deposit(_pid, _amount);\n        harvestCake();\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\n        emit DepositByProxy(msg.sender, address(this), _pid, _amount);\n    }\n\n    /**\n     * @notice Withdraw LP tokens from pool.\n     * @dev It can only be called by admin.\n     * @param _pid The id of the pool.\n     * @param _amount Amount of LP tokens to withdraw.\n     */\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant onlyAdmin {\n        uint256 poolLength = masterchefV2.poolLength();\n        require(_pid < poolLength, \"Pool is not exist\");\n        masterchefV2.withdraw(_pid, _amount);\n        address lpAddress = masterchefV2.lpToken(_pid);\n        IERC20(lpAddress).safeTransfer(msg.sender, _amount);\n        harvestCake();\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\n        emit WithdrawByProxy(msg.sender, address(this), _pid, _amount);\n    }\n\n    /**\n     * @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\n     * @dev It can only be called by admin.\n     * @param _pid The id of the pool.\n     */\n    function emergencyWithdraw(uint256 _pid) external nonReentrant onlyAdmin {\n        uint256 poolLength = masterchefV2.poolLength();\n        require(_pid < poolLength, \"Pool is not exist\");\n        masterchefV2.emergencyWithdraw(_pid);\n        address lpAddress = masterchefV2.lpToken(_pid);\n        IERC20(lpAddress).safeTransfer(msg.sender, IERC20(lpAddress).balanceOf(address(this)));\n        harvestCake();\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\n        emit EmergencyWithdrawByProxy(msg.sender, address(this), _pid);\n    }\n\n    function harvestCake() internal {\n        uint256 cakeBalance = cakeToken.balanceOf(address(this));\n        if (cakeBalance > 0) {\n            cakeToken.safeTransfer(msg.sender, cakeBalance);\n        }\n    }\n}"
    },
    "contracts/FarmBoosterProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./interfaces/IFarmBooster.sol\";\nimport \"./FarmBoosterProxy.sol\";\n\ncontract FarmBoosterProxyFactory {\n    address public immutable Farm_Booster;\n    address public immutable masterchefV2;\n    address public immutable cakeToken;\n    // Record the user proxy contract address\n    mapping(address => address) public proxyContract;\n    // Record the user address corresponding to the proxy\n    mapping(address => address) public proxyUser;\n    event NewFarmBoosterProxyContract(address indexed farmBoosterProxyAddress);\n\n    /**\n     * @notice Constructor\n     * @param _farmBooster: the address of the farm booster\n     * @param _masterchefV2: the address of the Masterchef V2\n     * @param _cakeToken: the address of the cake token\n     */\n    constructor(\n        address _farmBooster,\n        address _masterchefV2,\n        address _cakeToken\n    ) {\n        Farm_Booster = _farmBooster;\n        masterchefV2 = _masterchefV2;\n        cakeToken = _cakeToken;\n    }\n\n    /**\n     * @notice It creates the farm booster Proxy contract and initializes the contract.\n     */\n    function createFarmBoosterProxy() external {\n        require(proxyContract[msg.sender] == address(0), \"The current user already has a proxy\");\n        bytes memory bytecode = type(FarmBoosterProxy).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(block.timestamp, block.number, msg.sender));\n        address farmBoosterProxyAddress;\n\n        assembly {\n            farmBoosterProxyAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        require(proxyUser[farmBoosterProxyAddress] == address(0), \"Proxy already exists\");\n\n        proxyContract[msg.sender] = farmBoosterProxyAddress;\n        proxyUser[farmBoosterProxyAddress] = msg.sender;\n\n        FarmBoosterProxy(farmBoosterProxyAddress).initialize(msg.sender, Farm_Booster, masterchefV2, cakeToken);\n        IFarmBooster(Farm_Booster).setProxy(msg.sender, farmBoosterProxyAddress);\n\n        emit NewFarmBoosterProxyContract(farmBoosterProxyAddress);\n    }\n}"
    },
    "contracts/interfaces/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\ninterface IBEP20 {\n    function mint(address _to, uint256 _amount) external;\n    /**\n     * @dev Returns the amount of tokens in existence.\n   */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n   */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n   */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n   */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n   */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n   */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n    function allowance(address _owner, address spender)\n    external\n    view\n    returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/IBoostContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBoostContract {\n    function onCakePoolUpdate(\n        address _user,\n        uint256 _lockedAmount,\n        uint256 _lockedDuration,\n        uint256 _totalLockedAmount,\n        uint256 _maxLockDuration\n    ) external;\n}"
    },
    "contracts/interfaces/ICakePool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICakePool {\n    function userInfo(address _user)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            uint256\n        );\n\n    function getPricePerFullShare() external view returns (uint256);\n\n    function totalLockedAmount() external view returns (uint256);\n\n    function totalShares() external view returns (uint256);\n\n    function BOOST_WEIGHT() external view returns (uint256);\n\n    function MAX_LOCK_DURATION() external view returns (uint256);\n}"
    },
    "contracts/interfaces/IFarmBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IFarmBooster {\n    function onCakePoolUpdate(\n        address _user,\n        uint256 _lockedAmount,\n        uint256 _lockedDuration,\n        uint256 _totalLockedAmount,\n        uint256 _maxLockDuration\n    ) external;\n\n    function updatePoolBoostMultiplier(address _user, uint256 _pid) external;\n\n    function setProxy(address _user, address _proxy) external;\n\n    function isBoosterPool(address _user, uint256 _pid) external view returns (bool);\n}"
    },
    "contracts/interfaces/IMasterChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IMasterChefV2 {\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\n\n    function userInfo(uint256 _pid, address _user)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function emergencyWithdraw(uint256 _pid) external;\n\n    function lpToken(uint256 _pid) external view returns (address);\n\n    function poolLength() external view returns (uint256 pools);\n\n    function getBoostMultiplier(address _user, uint256 _pid) external view returns (uint256);\n\n    function updateBoostMultiplier(\n        address _user,\n        uint256 _pid,\n        uint256 _newMultiplier\n    ) external;\n}"
    },
    "contracts/interfaces/IVCake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IVCake {\n    function deposit(\n        address _user,\n        uint256 _amount,\n        uint256 _lockDuration\n    ) external;\n\n    function withdraw(address _user) external;\n}"
    },
    "contracts/libraries/IterableMapping.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nstruct ItMap {\n    // pid => boost\n    mapping(uint256 => uint256) data;\n    // pid => index\n    mapping(uint256 => uint256) indexs;\n    // array of pid\n    uint256[] keys;\n    // never use it, just for keep compile success.\n    uint256 size;\n}\n\nlibrary IterableMapping {\n    function insert(\n        ItMap storage self,\n        uint256 key,\n        uint256 value\n    ) internal {\n        uint256 keyIndex = self.indexs[key];\n        self.data[key] = value;\n        if (keyIndex > 0) return;\n        else {\n            self.indexs[key] = self.keys.length + 1;\n            self.keys.push(key);\n            return;\n        }\n    }\n\n    function remove(ItMap storage self, uint256 key) internal {\n        uint256 index = self.indexs[key];\n        if (index == 0) return;\n        uint256 lastKey = self.keys[self.keys.length - 1];\n        if (key != lastKey) {\n            self.keys[index - 1] = lastKey;\n            self.indexs[lastKey] = index;\n        }\n        delete self.data[key];\n        delete self.indexs[key];\n        self.keys.pop();\n    }\n\n    function contains(ItMap storage self, uint256 key) internal view returns (bool) {\n        return self.indexs[key] > 0;\n    }\n}"
    }
  },
  "settings": {
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc",
          "devdoc",
          "userdoc",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    },
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}