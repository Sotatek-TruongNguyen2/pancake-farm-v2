{
  "address": "0x44054317DD02d318d6d2ddf1de18B766AC3A6a38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBEP20",
          "name": "_TIKTAK",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_burnAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IBEP20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isRegular",
          "type": "bool"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "boostContract",
          "type": "address"
        }
      ],
      "name": "UpdateBoostContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "UpdateBoostMultiplier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "UpdateBurnAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "acctiktakPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "UpdateWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "regularFarmRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "specialFarmRate",
          "type": "uint256"
        }
      ],
      "name": "UpdatetiktakRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_TIKTAK_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOST_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTERCHEF_TIKTAK_PER_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BOOST_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIKTAK",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIKTAK_RATE_TOTAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBEP20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isRegular",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "burntiktak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getBoostMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestRewardsFromOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBurnedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingtiktak",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "acctiktakPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBoostedShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegular",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pools",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isRegular",
          "type": "bool"
        }
      ],
      "name": "tiktakPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tiktakPerBlockToBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tiktakRateToBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tiktakRateToRegularFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tiktakRateToSpecialFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRegularAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSpecialAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBoostContract",
          "type": "address"
        }
      ],
      "name": "updateBoostContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "updateBoostMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "updateBurnAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "acctiktakPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBoostedShare",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isRegular",
              "type": "bool"
            }
          ],
          "internalType": "struct MasterChefV2.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isValid",
          "type": "bool"
        }
      ],
      "name": "updateWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_burnRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_regularFarmRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_specialFarmRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "updatetiktakRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostMultiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1cc12825e1c2d405cd82fc5cac8855fa93fbc990646d2f3a1727070607ff2fb7",
  "receipt": {
    "to": null,
    "from": "0xA8c344b867d0697197d4Df75c807cf023f537b38",
    "contractAddress": "0x44054317DD02d318d6d2ddf1de18B766AC3A6a38",
    "transactionIndex": 10,
    "gasUsed": "3166432",
    "logsBloom": "0x
    "blockHash": "0xd45e6e70564b06adcbdb6769203f64b3b4d6e426f5e0633fb22b443ed36915de",
    "transactionHash": "0x1cc12825e1c2d405cd82fc5cac8855fa93fbc990646d2f3a1727070607ff2fb7",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 26189653,
        "transactionHash": "0x1cc12825e1c2d405cd82fc5cac8855fa93fbc990646d2f3a1727070607ff2fb7",
        "address": "0x44054317DD02d318d6d2ddf1de18B766AC3A6a38",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a8c344b867d0697197d4df75c807cf023f537b38"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0xd45e6e70564b06adcbdb6769203f64b3b4d6e426f5e0633fb22b443ed36915de"
      }
    ],
    "blockNumber": 26189653,
    "cumulativeGasUsed": "5359264",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x483Ed007BA31da2D570bA816F028135d1F0c60A6",
    "0xA8c344b867d0697197d4Df75c807cf023f537b38"
  ],
  "solcInputHash": "b16cb4cff57c4a504b00f7c7657c6ca8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_TIKTAK\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"boostContract\",\"type\":\"address\"}],\"name\":\"UpdateBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateBoostMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"UpdateBurnAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acctiktakPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"UpdateWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regularFarmRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specialFarmRate\",\"type\":\"uint256\"}],\"name\":\"UpdatetiktakRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_TIKTAK_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF_TIKTAK_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIKTAK\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIKTAK_RATE_TOTAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"burntiktak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRewardsFromOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingtiktak\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"acctiktakPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"}],\"name\":\"tiktakPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tiktakPerBlockToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tiktakRateToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tiktakRateToRegularFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tiktakRateToSpecialFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRegularAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSpecialAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBoostContract\",\"type\":\"address\"}],\"name\":\"updateBoostContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateBurnAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"acctiktakPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChefV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"updateWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updatetiktakRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,address,bool,bool)\":{\"params\":{\"_allocPoint\":\"Number of allocation points for the new pool.\",\"_isRegular\":\"Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\",\"_lpToken\":\"Address of the LP BEP-20 token.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation. only for TIKTAK distributions within PantiktakSwap products.\"}},\"burntiktak(bool)\":{\"params\":{\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"constructor\":{\"params\":{\"_TIKTAK\":\"The TIKTAK token contract address.\",\"_burnAdmin\":\"The address of burn admin.\"}},\"deposit(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of LP tokens to deposit.\",\"_pid\":\"The id of the pool. See `poolInfo`.\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\"}},\"getBoostMultiplier(address,uint256)\":{\"params\":{\"_pid\":\"The pool id.\",\"_user\":\"The user address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingtiktak(uint256,address)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\",\"_user\":\"Address of the user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"set(uint256,uint256,bool)\":{\"params\":{\"_allocPoint\":\"New number of allocation points for the pool.\",\"_pid\":\"The id of the pool. See `poolInfo`.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"tiktakPerBlock(bool)\":{\"params\":{\"_isRegular\":\"If the pool belongs to regular or special.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBoostContract(address)\":{\"params\":{\"_newBoostContract\":\"The new address for handling all the share boosts.\"}},\"updateBoostMultiplier(address,uint256,uint256)\":{\"params\":{\"_newMultiplier\":\"New boost multiplier.\",\"_pid\":\"The pool id for the boost factor updates.\",\"_user\":\"The user address for boost factor updates.\"}},\"updateBurnAdmin(address)\":{\"params\":{\"_newAdmin\":\"The new burn admin address.\"}},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}},\"updateWhiteList(address,bool)\":{\"params\":{\"_isValid\":\"The flag for valid or invalid.\",\"_user\":\"The address to be updated.\"}},\"updatetiktakRate(uint256,uint256,uint256,bool)\":{\"params\":{\"_burnRate\":\"The % of TIKTAK to burn each block.\",\"_regularFarmRate\":\"The % of TIKTAK to regular pools each block.\",\"_specialFarmRate\":\"The % of TIKTAK to special pools each block.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of LP tokens to withdraw.\",\"_pid\":\"The id of the pool. See `poolInfo`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BOOST_PRECISION()\":{\"notice\":\"Basic boost factor, none boosted user's boost factor\"},\"MASTERCHEF_TIKTAK_PER_BLOCK()\":{\"notice\":\"40 tiktaks per block in MCV1\"},\"MAX_BOOST_PRECISION()\":{\"notice\":\"Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\"},\"TIKTAK()\":{\"notice\":\"Address of TIKTAK contract.\"},\"TIKTAK_RATE_TOTAL_PRECISION()\":{\"notice\":\"total tiktak rate = toBurn + toRegular + toSpecial\"},\"add(uint256,address,bool,bool)\":{\"notice\":\"Add a new pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.\"},\"boostContract()\":{\"notice\":\"The contract handles the share boosts.\"},\"burnAdmin()\":{\"notice\":\"The only address can withdraw all the burn TIKTAK.\"},\"burntiktak(bool)\":{\"notice\":\"Send TIKTAK pending for burn to `burnAdmin`.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit LP tokens to pool.\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about the rewards. EMERGENCY ONLY.\"},\"getBoostMultiplier(address,uint256)\":{\"notice\":\"Get user boost multiplier for specific pool id.\"},\"harvestRewardsFromOwner()\":{\"notice\":\"Harvests TIKTAK from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to MCV2.\"},\"lpToken(uint256)\":{\"notice\":\"Address of the LP token for each MCV2 pool.\"},\"massUpdatePools()\":{\"notice\":\"Update tiktak reward for all the active pools. Be careful of gas spending!\"},\"pendingtiktak(uint256,address)\":{\"notice\":\"View function for checking pending TIKTAK rewards.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each MCV2 pool.\"},\"poolLength()\":{\"notice\":\"Returns the number of MCV2 pools.\"},\"set(uint256,uint256,bool)\":{\"notice\":\"Update the given pool's TIKTAK allocation point. Can only be called by the owner.\"},\"tiktakPerBlock(bool)\":{\"notice\":\"Calculates and returns the `amount` of TIKTAK per block.\"},\"tiktakPerBlockToBurn()\":{\"notice\":\"Calculates and returns the `amount` of TIKTAK per block to burn.\"},\"tiktakRateToBurn()\":{\"notice\":\"The last block number of TIKTAK burn action being executed.TIKTAK distribute % for burn\"},\"tiktakRateToRegularFarm()\":{\"notice\":\"TIKTAK distribute % for regular farm pool\"},\"tiktakRateToSpecialFarm()\":{\"notice\":\"TIKTAK distribute % for special pools\"},\"totalRegularAllocPoint()\":{\"notice\":\"Total regular allocation points. Must be the sum of all regular pools' allocation points.\"},\"totalSpecialAllocPoint()\":{\"notice\":\"Total special allocation points. Must be the sum of all special pools' allocation points.\"},\"updateBoostContract(address)\":{\"notice\":\"Update boost contract address and max boost factor.\"},\"updateBoostMultiplier(address,uint256,uint256)\":{\"notice\":\"Update user boost factor.\"},\"updateBurnAdmin(address)\":{\"notice\":\"Update burn admin address.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables for the given pool.\"},\"updateWhiteList(address,bool)\":{\"notice\":\"Update whitelisted addresses for special pools.\"},\"updatetiktakRate(uint256,uint256,uint256,bool)\":{\"notice\":\"Update the % of TIKTAK distributions for burn, regular pools and special pools.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each pool user.\"},\"whiteList(address)\":{\"notice\":\"The whitelist of addresses allowed to deposit in special pools.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw LP tokens from pool.\"}},\"notice\":\"The (older) MasterChef contract gives out a constant number of TIKTAK tokens per block. It is the only address with minting rights for TIKTAK. The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token that is deposited into the MasterChef V1 (MCV1) contract. The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterchefV2.sol\":\"MasterChefV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/@openzeppelin-0.6.12/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xb6232cf1921a36b072814b88b8508f2cf9890919fd9e678f1bdade789a0620cd\",\"license\":\"MIT\"},\"contracts/@openzeppelin-0.6.12/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *z\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x51bfce9edf3657bb55aea709087ea24c91a26a9b2aadaf0b9ee58c290d6ccadc\",\"license\":\"MIT\"},\"contracts/@openzeppelin-0.6.12/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x2e1df665169560627c2a0dce65572e63de974bb41c759cdeed973cd570b4d7cf\",\"license\":\"MIT\"},\"contracts/@openzeppelin-0.6.12/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x42b040c5389fef91ea8637793e754d7c059a718275c9c12d6e21204b2a9b46e2\",\"license\":\"MIT\"},\"contracts/@openzeppelin-0.6.12/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0xf2a1c1864b2f16d88b3340d19d306087233024084c4c28b39072459ddb27e84e\",\"license\":\"MIT\"},\"contracts/MasterchefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./@openzeppelin-0.6.12/contracts/access/Ownable.sol\\\";\\nimport \\\"./@openzeppelin-0.6.12/contracts/math/SafeMath.sol\\\";\\nimport \\\"./@openzeppelin-0.6.12/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IBEP20.sol\\\";\\nimport \\\"./SafeBEP20.sol\\\";\\nimport \\\"./interfaces/IMasterChef.sol\\\";\\n\\n/// @notice The (older) MasterChef contract gives out a constant number of TIKTAK tokens per block.\\n/// It is the only address with minting rights for TIKTAK.\\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\\n/// that is deposited into the MasterChef V1 (MCV1) contract.\\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives.\\ncontract MasterChefV2 is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    /// @notice Info of each MCV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\\n    ///\\n    /// We do some fancy math here. Basically, any point in time, the amount of TIKTAKs\\n    /// entitled to a user but is pending to be distributed is:\\n    ///\\n    ///   pending reward = (user share * pool.acctiktakPerShare) - user.rewardDebt\\n    ///\\n    ///   Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n    ///   1. The pool's `acctiktakPerShare` (and `lastRewardBlock`) gets updated.\\n    ///   2. User receives the pending reward sent to his/her address.\\n    ///   3. User's `amount` gets updated. Pool's `totalBoostedShare` gets updated.\\n    ///   4. User's `rewardDebt` gets updated.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 boostMultiplier;\\n    }\\n\\n    /// @notice Info of each MCV2 pool.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    ///     Also known as the amount of \\\"multipliers\\\". Combined with `totalXAllocPoint`, it defines the % of\\n    ///     TIKTAK rewards each pool gets.\\n    /// `acctiktakPerShare` Accumulated TIKTAKs per share, times 1e12.\\n    /// `lastRewardBlock` Last block number that pool update action is executed.\\n    /// `isRegular` The flag to set pool is regular or special. See below:\\n    ///     In MasterChef V2 farms are \\\"regular pools\\\". \\\"special pools\\\", which use a different sets of\\n    ///     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\\n    ///     the TIKTAK rewards to all the PantiktakSwap products.\\n    /// `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\\n    struct PoolInfo {\\n        uint256 acctiktakPerShare;\\n        uint256 lastRewardBlock;\\n        uint256 allocPoint;\\n        uint256 totalBoostedShare;\\n        bool isRegular;\\n    }\\n\\n    /// @notice Address of TIKTAK contract.\\n    IBEP20 public immutable TIKTAK;\\n\\n    /// @notice The only address can withdraw all the burn TIKTAK.\\n    address public burnAdmin;\\n    /// @notice The contract handles the share boosts.\\n    address public boostContract;\\n\\n    /// @notice Info of each MCV2 pool.\\n    PoolInfo[] public poolInfo;\\n    /// @notice Address of the LP token for each MCV2 pool.\\n    IBEP20[] public lpToken;\\n\\n    /// @notice Info of each pool user.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\\n    mapping(address => bool) public whiteList;\\n\\n    /// @notice Total regular allocation points. Must be the sum of all regular pools' allocation points.\\n    uint256 public totalRegularAllocPoint;\\n    /// @notice Total special allocation points. Must be the sum of all special pools' allocation points.\\n    uint256 public totalSpecialAllocPoint;\\n    ///  @notice 40 tiktaks per block in MCV1\\n    uint256 public constant MASTERCHEF_TIKTAK_PER_BLOCK = 40 * 1e18;\\n    uint256 public constant ACC_TIKTAK_PRECISION = 1e18;\\n\\n    /// @notice Basic boost factor, none boosted user's boost factor\\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\\n    /// @notice total tiktak rate = toBurn + toRegular + toSpecial\\n    uint256 public constant TIKTAK_RATE_TOTAL_PRECISION = 1e12;\\n    /// @notice The last block number of TIKTAK burn action being executed.\\n    /// @notice TIKTAK distribute % for burn\\n    uint256 public tiktakRateToBurn = 643750000000;\\n    /// @notice TIKTAK distribute % for regular farm pool\\n    uint256 public tiktakRateToRegularFarm = 62847222222;\\n    /// @notice TIKTAK distribute % for special pools\\n    uint256 public tiktakRateToSpecialFarm = 293402777778;\\n\\n    uint256 public lastBurnedBlock;\\n\\n    // event Init();\\n    event AddPool(uint256 indexed pid, uint256 allocPoint, IBEP20 indexed lpToken, bool isRegular);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 acctiktakPerShare);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event UpdatetiktakRate(uint256 burnRate, uint256 regularFarmRate, uint256 specialFarmRate);\\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\\n    event UpdateWhiteList(address indexed user, bool isValid);\\n    event UpdateBoostContract(address indexed boostContract);\\n    event UpdateBoostMultiplier(address indexed user, uint256 pid, uint256 oldMultiplier, uint256 newMultiplier);\\n\\n    /// @param _TIKTAK The TIKTAK token contract address.\\n    /// @param _burnAdmin The address of burn admin.\\n    constructor(\\n        IBEP20 _TIKTAK,\\n        address _burnAdmin\\n    ) public {\\n        TIKTAK = _TIKTAK;\\n        burnAdmin = _burnAdmin;\\n    }\\n\\n    /**\\n     * @dev Throws if caller is not the boost contract.\\n     */\\n    modifier onlyBoostContract() {\\n        require(boostContract == msg.sender, \\\"Ownable: caller is not the boost contract\\\");\\n        _;\\n    }\\n\\n    // /// @notice Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting permission of TIKTAK.\\n    // /// It will transfer all the `dummyToken` in the tx sender address.\\n    // /// The allocation point for the dummy pool on MCV1 should be equal to the total amount of allocPoint.\\n    // /// @param dummyToken The address of the BEP-20 token to be deposited into MCV1.\\n    // function init(IBEP20 dummyToken) external onlyOwner {\\n    //     uint256 balance = dummyToken.balanceOf(msg.sender);\\n    //     require(balance != 0, \\\"MasterChefV2: Balance must exceed 0\\\");\\n    //     dummyToken.safeTransferFrom(msg.sender, address(this), balance);\\n    //     dummyToken.approve(address(MASTER_CHEF), balance);\\n    //     MASTER_CHEF.deposit(MASTER_PID, balance);\\n    //     // MCV2 start to earn TIKTAK reward from current block in MCV1 pool\\n    //     lastBurnedBlock = block.number;\\n    //     emit Init();\\n    // }\\n\\n    /// @notice Returns the number of MCV2 pools.\\n    function poolLength() public view returns (uint256 pools) {\\n        pools = poolInfo.length;\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    /// @param _allocPoint Number of allocation points for the new pool.\\n    /// @param _lpToken Address of the LP BEP-20 token.\\n    /// @param _isRegular Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    /// only for TIKTAK distributions within PantiktakSwap products.\\n    function add(\\n        uint256 _allocPoint,\\n        IBEP20 _lpToken,\\n        bool _isRegular,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        require(_lpToken.balanceOf(address(this)) >= 0, \\\"None BEP20 tokens\\\");\\n        // stake TIKTAK token will cause staked token and reward token mixed up,\\n        // may cause staked tokens withdraw as reward token,never do it.\\n        require(_lpToken != TIKTAK, \\\"TIKTAK token can't be added to farm pools\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (_isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\\n        }\\n        lpToken.push(_lpToken);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n        allocPoint: _allocPoint,\\n        lastRewardBlock: block.number,\\n        acctiktakPerShare: 0,\\n        isRegular: _isRegular,\\n        totalBoostedShare: 0\\n        })\\n        );\\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\\n    }\\n\\n    /// @notice Update the given pool's TIKTAK allocation point. Can only be called by the owner.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _allocPoint New number of allocation points for the pool.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\\n        updatePool(_pid);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (poolInfo[_pid].isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        }\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        emit SetPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice View function for checking pending TIKTAK rewards.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _user Address of the user.\\n    function pendingtiktak(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 acctiktakPerShare = pool.acctiktakPerShare;\\n        uint256 lpSupply = pool.totalBoostedShare;\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n\\n            uint256 tiktakReward = multiplier.mul(tiktakPerBlock(pool.isRegular)).mul(pool.allocPoint).div(\\n                (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint)\\n            );\\n            acctiktakPerShare = acctiktakPerShare.add(tiktakReward.mul(ACC_TIKTAK_PRECISION).div(lpSupply));\\n        }\\n\\n        uint256 boostedAmount = user.amount.mul(getBoostMultiplier(_user, _pid)).div(BOOST_PRECISION);\\n        return boostedAmount.mul(acctiktakPerShare).div(ACC_TIKTAK_PRECISION).sub(user.rewardDebt);\\n    }\\n\\n    /// @notice Update tiktak reward for all the active pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo memory pool = poolInfo[pid];\\n            if (pool.allocPoint != 0) {\\n                updatePool(pid);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates and returns the `amount` of TIKTAK per block.\\n    /// @param _isRegular If the pool belongs to regular or special.\\n    function tiktakPerBlock(bool _isRegular) public view returns (uint256 amount) {\\n        if (_isRegular) {\\n            amount = MASTERCHEF_TIKTAK_PER_BLOCK.mul(tiktakRateToRegularFarm).div(TIKTAK_RATE_TOTAL_PRECISION);\\n        } else {\\n            amount = MASTERCHEF_TIKTAK_PER_BLOCK.mul(tiktakRateToSpecialFarm).div(TIKTAK_RATE_TOTAL_PRECISION);\\n        }\\n    }\\n\\n    /// @notice Calculates and returns the `amount` of TIKTAK per block to burn.\\n    function tiktakPerBlockToBurn() public view returns (uint256 amount) {\\n        amount = MASTERCHEF_TIKTAK_PER_BLOCK.mul(tiktakRateToBurn).div(TIKTAK_RATE_TOTAL_PRECISION);\\n    }\\n\\n    /// @notice Update reward variables for the given pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[_pid];\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 lpSupply = pool.totalBoostedShare;\\n            uint256 totalAllocPoint = (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint);\\n\\n            if (lpSupply > 0 && totalAllocPoint > 0) {\\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n                uint256 tiktakReward = multiplier.mul(tiktakPerBlock(pool.isRegular)).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n                pool.acctiktakPerShare = pool.acctiktakPerShare.add((tiktakReward.mul(ACC_TIKTAK_PRECISION).div(lpSupply)));\\n            }\\n            pool.lastRewardBlock = block.number;\\n            poolInfo[_pid] = pool;\\n            emit UpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.acctiktakPerShare);\\n        }\\n    }\\n\\n    /// @notice Deposit LP tokens to pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _amount Amount of LP tokens to deposit.\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(\\n            pool.isRegular || whiteList[msg.sender],\\n            \\\"MasterChefV2: The address is not available to deposit in this pool\\\"\\n        );\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        if (user.amount > 0) {\\n            settlePendingtiktak(msg.sender, _pid, multiplier);\\n        }\\n\\n        if (_amount > 0) {\\n            uint256 before = lpToken[_pid].balanceOf(address(this));\\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\\n            user.amount = user.amount.add(_amount);\\n\\n            // Update total boosted share.\\n            pool.totalBoostedShare = pool.totalBoostedShare.add(_amount.mul(multiplier).div(BOOST_PRECISION));\\n        }\\n\\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.acctiktakPerShare).div(\\n            ACC_TIKTAK_PRECISION\\n        );\\n        poolInfo[_pid] = pool;\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice Withdraw LP tokens from pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _amount Amount of LP tokens to withdraw.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient\\\");\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        settlePendingtiktak(msg.sender, _pid, multiplier);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.acctiktakPerShare).div(\\n            ACC_TIKTAK_PRECISION\\n        );\\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\\n            _amount.mul(multiplier).div(BOOST_PRECISION)\\n        );\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice Harvests TIKTAK from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to MCV2.\\n    function harvestRewardsFromOwner() public {\\n    }\\n\\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        uint256 boostedAmount = amount.mul(getBoostMultiplier(msg.sender, _pid)).div(BOOST_PRECISION);\\n        pool.totalBoostedShare = pool.totalBoostedShare > boostedAmount ? pool.totalBoostedShare.sub(boostedAmount) : 0;\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpToken[_pid].safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /// @notice Send TIKTAK pending for burn to `burnAdmin`.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function burntiktak(bool _withUpdate) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\\n        uint256 pendingtiktakToBurn = multiplier.mul(tiktakPerBlockToBurn());\\n\\n        // SafeTransfer TIKTAK\\n        _safeTransfer(burnAdmin, pendingtiktakToBurn);\\n        lastBurnedBlock = block.number;\\n    }\\n\\n    /// @notice Update the % of TIKTAK distributions for burn, regular pools and special pools.\\n    /// @param _burnRate The % of TIKTAK to burn each block.\\n    /// @param _regularFarmRate The % of TIKTAK to regular pools each block.\\n    /// @param _specialFarmRate The % of TIKTAK to special pools each block.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function updatetiktakRate(\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        require(\\n            _burnRate > 0 && _regularFarmRate > 0 && _specialFarmRate > 0,\\n            \\\"MasterChefV2: tiktak rate must be greater than 0\\\"\\n        );\\n        require(\\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) == TIKTAK_RATE_TOTAL_PRECISION,\\n            \\\"MasterChefV2: Total rate must be 1e12\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        // burn tiktak base on old burn tiktak rate\\n        burntiktak(false);\\n\\n        tiktakRateToBurn = _burnRate;\\n        tiktakRateToRegularFarm = _regularFarmRate;\\n        tiktakRateToSpecialFarm = _specialFarmRate;\\n\\n        emit UpdatetiktakRate(_burnRate, _regularFarmRate, _specialFarmRate);\\n    }\\n\\n    /// @notice Update burn admin address.\\n    /// @param _newAdmin The new burn admin address.\\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\\n        require(_newAdmin != address(0), \\\"MasterChefV2: Burn admin address must be valid\\\");\\n        require(_newAdmin != burnAdmin, \\\"MasterChefV2: Burn admin address is the same with current address\\\");\\n        address _oldAdmin = burnAdmin;\\n        burnAdmin = _newAdmin;\\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\\n    }\\n\\n    /// @notice Update whitelisted addresses for special pools.\\n    /// @param _user The address to be updated.\\n    /// @param _isValid The flag for valid or invalid.\\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\\n        require(_user != address(0), \\\"MasterChefV2: The white list address must be valid\\\");\\n\\n        whiteList[_user] = _isValid;\\n        emit UpdateWhiteList(_user, _isValid);\\n    }\\n\\n    /// @notice Update boost contract address and max boost factor.\\n    /// @param _newBoostContract The new address for handling all the share boosts.\\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\\n        require(\\n            _newBoostContract != address(0) && _newBoostContract != boostContract,\\n            \\\"MasterChefV2: New boost contract address must be valid\\\"\\n        );\\n\\n        boostContract = _newBoostContract;\\n        emit UpdateBoostContract(_newBoostContract);\\n    }\\n\\n    /// @notice Update user boost factor.\\n    /// @param _user The user address for boost factor updates.\\n    /// @param _pid The pool id for the boost factor updates.\\n    /// @param _newMultiplier New boost multiplier.\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external onlyBoostContract nonReentrant {\\n        require(_user != address(0), \\\"MasterChefV2: The user address must be valid\\\");\\n        require(poolInfo[_pid].isRegular, \\\"MasterChefV2: Only regular farm could be boosted\\\");\\n        require(\\n            _newMultiplier >= BOOST_PRECISION && _newMultiplier <= MAX_BOOST_PRECISION,\\n            \\\"MasterChefV2: Invalid new boost multiplier\\\"\\n        );\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\\n        settlePendingtiktak(_user, _pid, prevMultiplier);\\n\\n        user.rewardDebt = user.amount.mul(_newMultiplier).div(BOOST_PRECISION).mul(pool.acctiktakPerShare).div(\\n            ACC_TIKTAK_PRECISION\\n        );\\n        pool.totalBoostedShare = pool.totalBoostedShare.sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION)).add(\\n            user.amount.mul(_newMultiplier).div(BOOST_PRECISION)\\n        );\\n        poolInfo[_pid] = pool;\\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\\n\\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\\n    }\\n\\n    /// @notice Get user boost multiplier for specific pool id.\\n    /// @param _user The user address.\\n    /// @param _pid The pool id.\\n    function getBoostMultiplier(address _user, uint256 _pid) public view returns (uint256) {\\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\\n        return multiplier > BOOST_PRECISION ? multiplier : BOOST_PRECISION;\\n    }\\n\\n    /// @notice Settles, distribute the pending TIKTAK rewards for given user.\\n    /// @param _user The user address for settling rewards.\\n    /// @param _pid The pool id.\\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\\n    function settlePendingtiktak(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _boostMultiplier\\n    ) internal {\\n        UserInfo memory user = userInfo[_pid][_user];\\n\\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(BOOST_PRECISION);\\n        uint256 acctiktak = boostedAmount.mul(poolInfo[_pid].acctiktakPerShare).div(ACC_TIKTAK_PRECISION);\\n        uint256 pending = acctiktak.sub(user.rewardDebt);\\n        // SafeTransfer TIKTAK\\n        _safeTransfer(_user, pending);\\n    }\\n\\n    /// @notice Safe Transfer TIKTAK.\\n    /// @param _to The TIKTAK receiver address.\\n    /// @param _amount transfer TIKTAK amounts.\\n    function _safeTransfer(address _to, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            // Check whether MCV2 has enough TIKTAK. If not, harvest from MCV1.\\n            if (TIKTAK.balanceOf(address(this)) < _amount) {\\n                harvestRewardsFromOwner();\\n            }\\n            uint256 balance = TIKTAK.balanceOf(address(this));\\n            if (balance < _amount) {\\n                _amount = balance;\\n            }\\n            TIKTAK.safeTransfer(_to, _amount);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6c78d4b25bd0d7ff4f90f1245c85a06c826762cf0dc8ddb41e9f9723020cd4de\",\"license\":\"MIT\"},\"contracts/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IBEP20.sol\\\";\\nimport \\\"./@openzeppelin-0.6.12/contracts/utils/Address.sol\\\";\\nimport \\\"./@openzeppelin-0.6.12/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IBEP20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n        token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n        address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\",\"keccak256\":\"0xc725ef7829be6cce9d456e8eb1e19e1bcf6dcad35d5f4df4ee675c08ae12cc96\",\"license\":\"MIT\"},\"contracts/interfaces/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    function mint(address _to, uint256 _amount) external;\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n   */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n   */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n   */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n   */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n   */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n   */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n    function allowance(address _owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x28c5b06c6f2fecf464c53a70d43618d975916acc4f095c55a8258ac660f2a104\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMasterChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function enterStaking(uint256 _amount) external;\\n\\n    function leaveStaking(uint256 _amount) external;\\n\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\",\"keccak256\":\"0x04dd26824c4dac1ab2d111d8c2a0b779a5e92891693cdbdc169832628f7d150d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526495e27d7580600a55640ea1fc81ce600b556444502b18b2600c553480156200002c57600080fd5b50604051620037c3380380620037c38339810160408190526200004f91620000e5565b60006200005b620000e1565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001805560609190911b6001600160601b031916608052600280546001600160a01b0319166001600160a01b039092169190911790556200013c565b3390565b60008060408385031215620000f8578182fd5b8251620001058162000123565b6020840151909250620001188162000123565b809150509250929050565b6001600160a01b03811681146200013957600080fd5b50565b60805160601c6136556200016e6000398061054152806119f3528061268b528061275e528061280b52506136556000f3fe608060405234801561001057600080fd5b50600436106102c75760003560e01c806381bdf98c1161017b578063c40d337b116100d8578063e2bbb1581161008c578063f2fde38b11610071578063f2fde38b1461051c578063f51475bf1461052f578063fd17c4e814610537576102c7565b8063e2bbb158146104f6578063e3d5b97314610509576102c7565b8063cc6db2da116100bd578063cc6db2da146103a9578063d7b79353146104db578063dfcedeee146104ee576102c7565b8063c40d337b146104c0578063c507aeaa146104c8576102c7565b806399d7e84a1161012f578063ac02cef311610114578063ac02cef31461049d578063ac1d0609146104a5578063b1c5d0a6146104b8576102c7565b806399d7e84a146104825780639dd2fcc31461048a576102c7565b806385935f3d1161016057806385935f3d146104455780638da5cb5b1461045857806393f1a40b14610460576102c7565b806381bdf98c1461042a57806384ec76f514610432576102c7565b8063441a3e701161022957806364482f79116101dd578063715018a6116101c2578063715018a61461040757806378db4c341461040f57806378ed5d1f14610417576102c7565b806364482f79146103ec57806369b02128146103ff576102c7565b806351eb05a61161020e57806351eb05a6146103b15780635312ea8e146103d1578063630b5ba1146103e4576102c7565b8063441a3e701461039657806346505f54146103a9576102c7565b80631526fe271161028057806331b108621161026557806331b1086214610366578063372c12b11461036e57806343d220ae1461038e576102c7565b80631526fe271461033a57806322f104021461035e576102c7565b8063041a84c9116102b1578063041a84c91461030a578063081e3eda1461031f5780630bb844bc14610327576102c7565b80626e5447146102cc578063033186e8146102ea575b600080fd5b6102d461053f565b6040516102e19190612d55565b60405180910390f35b6102fd6102f8366004612b6e565b610563565b6040516102e1919061356c565b61031d610318366004612b99565b6105b9565b005b6102fd610931565b61031d610335366004612b1a565b610937565b61034d610348366004612c05565b610aac565b6040516102e195949392919061359b565b6102fd610aed565b6102fd610afa565b61038161037c366004612b1a565b610b00565b6040516102e19190612dcd565b6102fd610b15565b61031d6103a4366004612cab565b610b21565b6102fd610d32565b6103c46103bf366004612c05565b610d3b565b6040516102e19190613530565b61031d6103df366004612c05565b610f11565b61031d61103f565b61031d6103fa366004612ccc565b6110d3565b6102fd61124a565b61031d611254565b6102fd61131f565b6102d4610425366004612c05565b611325565b6102d4611359565b61031d610440366004612bcd565b611375565b6102fd610453366004612c35565b61143b565b6102d46115e7565b61047361046e366004612c35565b611603565b6040516102e193929190613585565b6102fd61162f565b61031d610498366004612b1a565b611635565b6102fd611776565b61031d6104b3366004612b36565b61177c565b61031d6118b0565b6102fd6118b2565b61031d6104d6366004612c59565b6118b8565b61031d6104e9366004612d04565b611c91565b6102d4611df3565b61031d610504366004612cab565b611e0f565b6102fd610517366004612bcd565b6121da565b61031d61052a366004612b1a565b612237565b6102fd61236d565b6102fd61239b565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281206002015464e8d4a5100081116105ad5764e8d4a510006105af565b805b9150505b92915050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061326e565b60405180910390fd5b60026001541415610650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613419565b600260015573ffffffffffffffffffffffffffffffffffffffff83166106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613031565b600482815481106106af57fe5b600091825260209091206004600590920201015460ff166106fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906132cb565b64e8d4a51000811015801561071757506501d1a94a20008111155b61074d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612e29565b610755612ac8565b61075e83610d3b565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452909152812091925061079a8686610563565b90506107a78686836123a1565b6107e7670de0b6b3a76400006107db85600001516107e164e8d4a510006107db8a896000015461247e90919063ffffffff16565b906124d2565b9061247e565b60018301558154610833906108079064e8d4a51000906107db908861247e565b835461082d906108229064e8d4a51000906107db908761247e565b60608701519061251b565b9061255d565b6060840152600480548491908790811061084957fe5b6000918252602080832084516005939093020191825583810151600183015560408085015160028085019190915560608601516003850155608090950151600490930180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092558883526006815281832073ffffffffffffffffffffffffffffffffffffffff8b1680855291529181902090920186905590517f01abd62439b64f6c5dab6f94d56099495bd0c094f9c21f98f4d3562a21edb4ba9061091d90889085908990613585565b60405180910390a250506001805550505050565b60045490565b61093f61259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b73ffffffffffffffffffffffffffffffffffffffff81166109e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061308e565b60025473ffffffffffffffffffffffffffffffffffffffff82811691161415610a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613450565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fd146fe330fdddf682413850a35b28edfccd4c4b53cfee802fd24950de5be1dbe90600090a35050565b60048181548110610ab957fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff1685565b68022b1c8c1227a0000081565b600a5481565b60076020526000908152604090205460ff1681565b670de0b6b3a764000081565b60026001541415610b5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613419565b6002600155610b6b612ac8565b610b7483610d3b565b60008481526006602090815260408083203384529091529020805491925090831115610bcc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906131cb565b6000610bd83386610563565b9050610be53386836123a1565b8315610c3a578154610bf7908561251b565b8260000181905550610c3a338560058881548110610c1157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1691906125a0565b610c6e670de0b6b3a76400006107db85600001516107e164e8d4a510006107db87896000015461247e90919063ffffffff16565b6001830155610cb6610c8964e8d4a510006107db878561247e565b60048781548110610c9657fe5b90600052602060002090600502016003015461251b90919063ffffffff16565b60048681548110610cc357fe5b906000526020600020906005020160030181905550843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56886604051610d1f919061356c565b60405180910390a3505060018055505050565b64e8d4a5100081565b610d43612ac8565b60048281548110610d5057fe5b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004015460ff16151560808201529150431115610f0c5760608101516080820151600090610dc257600954610dc6565b6008545b9050600082118015610dd85750600081115b15610e45576000610df684602001514361251b90919063ffffffff16565b90506000610e1d836107db87604001516107e1610e168a608001516121da565b879061247e565b9050610e40610e38856107db84670de0b6b3a764000061247e565b86519061255d565b855250505b4360208401526004805484919086908110610e5c57fe5b6000918252602091829020835160059290920201908155828201516001820155604080840151600283015560608401516003830155608090930151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558401518451915186927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f4692610f019290918791613585565b60405180910390a250505b919050565b60026001541415610f4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613419565b6002600181905550600060048281548110610f6557fe5b600091825260208083208584526006825260408085203380875293528420805485825560018201869055600590940290910194509290610fbb9064e8d4a51000906107db90610fb49089610563565b859061247e565b905080846003015411610fcf576000610fde565b6003840154610fde908261251b565b8460030181905550610ff8338360058881548110610c1157fe5b843373ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059584604051610d1f919061356c565b60045460005b818110156110cf57611055612ac8565b6004828154811061106257fe5b60009182526020918290206040805160a08101825260059093029091018054835260018101549383019390935260028301549082018190526003830154606083015260049092015460ff16151560808201529150156110c6576110c482610d3b565b505b50600101611045565b5050565b6110db61259c565b60005473ffffffffffffffffffffffffffffffffffffffff90811691161461112f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b61113883610d3b565b5080156111475761114761103f565b6004838154811061115457fe5b600091825260209091206004600590920201015460ff16156111af576111a78261082d6004868154811061118457fe5b90600052602060002090600502016002015460085461251b90919063ffffffff16565b6008556111ea565b6111e68261082d600486815481106111c357fe5b90600052602060002090600502016002015460095461251b90919063ffffffff16565b6009555b81600484815481106111f857fe5b906000526020600020906005020160020181905550827fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f88360405161123d919061356c565b60405180910390a2505050565b6501d1a94a200081565b61125c61259c565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146112b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600d5481565b6005818154811061133257fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b61137d61259c565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146113d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b80156113df576113df61103f565b60006113f6600d544361251b90919063ffffffff16565b9050600061140c61140561236d565b839061247e565b6002549091506114329073ffffffffffffffffffffffffffffffffffffffff1682612646565b505043600d5550565b6000611445612ac8565b6004848154811061145257fe5b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301939093526002830154908201526003820154606082015260049091015460ff161515608082015290506114ac612af9565b50600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252918290208251606080820185528254825260018301548285015260029092015493810193909352835190840151918401519091904311801561151a57508015155b1561159357600061153885602001514361251b90919063ffffffff16565b9050600061156c866080015161155057600954611554565b6008545b6107db88604001516107e1610e168b608001516121da565b905061158e611587846107db84670de0b6b3a764000061247e565b859061255d565b935050505b60006115b364e8d4a510006107db6115ab8a8c610563565b87519061247e565b60208501519091506115db906115d5670de0b6b3a76400006107db858861247e565b9061251b565b98975050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b60095481565b61163d61259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b73ffffffffffffffffffffffffffffffffffffffff8116158015906116d1575060035473ffffffffffffffffffffffffffffffffffffffff828116911614155b611707576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906134d3565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f4c0c07d0b548b824a1b998eb4d11fccf1cfbc1e47edcdb309970ba88315eb30390600090a250565b600c5481565b61178461259c565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146117d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b73ffffffffffffffffffffffffffffffffffffffff8216611825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613328565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600760205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016841515179055517fc551bbb22d0406dbfb8b6b7740cc521bcf44e1106029cf899c19b6a8e4c99d51906118a4908490612dcd565b60405180910390a25050565b565b60085481565b6118c061259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190611969903090600401612d55565b60206040518083038186803b15801561198157600080fd5b505afa158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b99190612c1d565b10156119f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613202565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612f40565b8015611a8557611a8561103f565b8115611aa057600854611a98908561255d565b600855611ab1565b600954611aad908561255d565b6009555b60058054600180820183557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091556040805160a081018252600080825243602083019081529282018a8152606083018281528915156080850190815260048054808a018255945293517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9389029384015593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790559154611c529161251b565b7f18caa0724a26384928efe604ae6ddc99c242548876259770fc88fcb7e719d8fa8685604051611c83929190613575565b60405180910390a350505050565b611c9961259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611ced576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b600084118015611cfd5750600083115b8015611d095750600082115b611d3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612f9d565b64e8d4a51000611d538361082d878761255d565b14611d8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906133bc565b8015611d9857611d9861103f565b611da26000611375565b600a849055600b839055600c8290556040517f915e4ab3f3ef4bbf4ac884cc65c42daeb5c26ee4c0d5b0e7cc2a85025a5f5f5490611de590869086908690613585565b60405180910390a150505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415611e4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613419565b6002600155611e59612ac8565b611e6283610d3b565b6000848152600660209081526040808320338452909152902060808201519192509080611e9e57503360009081526007602052604090205460ff165b611ed4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906130eb565b6000611ee03386610563565b825490915015611ef557611ef53386836123a1565b83156120f157600060058681548110611f0a57fe5b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190611f69903090600401612d55565b60206040518083038186803b158015611f8157600080fd5b505afa158015611f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb99190612c1d565b9050611ff833308760058a81548110611fce57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16929190612832565b6120b8816005888154811061200957fe5b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190612068903090600401612d55565b60206040518083038186803b15801561208057600080fd5b505afa158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d59190612c1d565b83549095506120c7908661255d565b83556120ea6120df64e8d4a510006107db888661247e565b60608601519061255d565b6060850152505b612125670de0b6b3a76400006107db85600001516107e164e8d4a510006107db87896000015461247e90919063ffffffff16565b8260010181905550826004868154811061213b57fe5b6000918252602091829020835160059290920201908155908201516001820155604080830151600283015560608301516003830155608090920151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905551859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590610d1f90889061356c565b600081156122105761220964e8d4a510006107db600b5468022b1c8c1227a0000061247e90919063ffffffff16565b9050610f0c565b6105b364e8d4a510006107db600c5468022b1c8c1227a0000061247e90919063ffffffff16565b61223f61259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614612293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b73ffffffffffffffffffffffffffffffffffffffff81166122e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612ee3565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061239664e8d4a510006107db600a5468022b1c8c1227a0000061247e90919063ffffffff16565b905090565b600b5481565b6123a9612af9565b50600082815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320815160608101835281548082526001830154948201949094526002909101549181019190915291906124169064e8d4a51000906107db908661247e565b9050600061244e670de0b6b3a76400006107db6004888154811061243657fe5b6000918252602090912060059091020154859061247e565b9050600061246984602001518361251b90919063ffffffff16565b90506124758782612646565b50505050505050565b60008261248d575060006105b3565b8282028284828161249a57fe5b04146105ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061316e565b600061251483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612859565b9392505050565b600061251483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506128aa565b6000828201838110156105ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612ffa565b3390565b6126418363a9059cbb60e01b84846040516024016125bf929190612da7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526128f0565b505050565b80156110cf576040517f70a08231000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906126c0903090600401612d55565b60206040518083038186803b1580156126d857600080fd5b505afa1580156126ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127109190612c1d565b101561271e5761271e6118b0565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612793903090600401612d55565b60206040518083038186803b1580156127ab57600080fd5b505afa1580156127bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e39190612c1d565b9050818110156127f1578091505b61264173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001684846125a0565b612853846323b872dd60e01b8585856040516024016125bf93929190612d76565b50505050565b60008183612894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9190612dd8565b5060008385816128a057fe5b0495945050505050565b600081848411156128e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9190612dd8565b505050900390565b6060612952826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129a69092919063ffffffff16565b80519091501561264157808060200190518101906129709190612be9565b612641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612e86565b60606129b584846000856129bd565b949350505050565b60606129c885612ac2565b6129fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613385565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051612a289190612d39565b60006040518083038185875af1925050503d8060008114612a65576040519150601f19603f3d011682016040523d82523d6000602084013e612a6a565b606091505b50915091508115612a7e5791506129b59050565b805115612a8e5780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9190612dd8565b3b151590565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b60405180606001604052806000815260200160008152602001600081525090565b600060208284031215612b2b578081fd5b81356105ad816135ec565b60008060408385031215612b48578081fd5b8235612b53816135ec565b91506020830135612b6381613611565b809150509250929050565b60008060408385031215612b80578182fd5b8235612b8b816135ec565b946020939093013593505050565b600080600060608486031215612bad578081fd5b8335612bb8816135ec565b95602085013595506040909401359392505050565b600060208284031215612bde578081fd5b81356105ad81613611565b600060208284031215612bfa578081fd5b81516105ad81613611565b600060208284031215612c16578081fd5b5035919050565b600060208284031215612c2e578081fd5b5051919050565b60008060408385031215612c47578182fd5b823591506020830135612b63816135ec565b60008060008060808587031215612c6e578081fd5b843593506020850135612c80816135ec565b92506040850135612c9081613611565b91506060850135612ca081613611565b939692955090935050565b60008060408385031215612cbd578182fd5b50508035926020909101359150565b600080600060608486031215612ce0578283fd5b83359250602084013591506040840135612cf981613611565b809150509250925092565b60008060008060808587031215612d19578384fd5b8435935060208501359250604085013591506060850135612ca081613611565b60008251612d4b8184602087016135c0565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152612df78160408501602087016135c0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252602a908201527f4d61737465724368656656323a20496e76616c6964206e657720626f6f73742060408201527f6d756c7469706c69657200000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666542455032303a204245503230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f54494b54414b20746f6b656e2063616e277420626520616464656420746f206660408201527f61726d20706f6f6c730000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4d61737465724368656656323a2074696b74616b2072617465206d757374206260408201527f652067726561746572207468616e203000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602c908201527f4d61737465724368656656323a2054686520757365722061646472657373206d60408201527f7573742062652076616c69640000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f4d61737465724368656656323a204275726e2061646d696e206164647265737360408201527f206d7573742062652076616c6964000000000000000000000000000000000000606082015260800190565b60208082526042908201527f4d61737465724368656656323a205468652061646472657373206973206e6f7460408201527f20617661696c61626c6520746f206465706f73697420696e207468697320706f60608201527f6f6c000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f77697468647261773a20496e73756666696369656e7400000000000000000000604082015260600190565b60208082526011908201527f4e6f6e6520424550323020746f6b656e73000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520626f6f737460408201527f20636f6e74726163740000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4d61737465724368656656323a204f6e6c7920726567756c6172206661726d2060408201527f636f756c6420626520626f6f7374656400000000000000000000000000000000606082015260800190565b60208082526032908201527f4d61737465724368656656323a20546865207768697465206c6973742061646460408201527f72657373206d7573742062652076616c69640000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526025908201527f4d61737465724368656656323a20546f74616c2072617465206d75737420626560408201527f2031653132000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526041908201527f4d61737465724368656656323a204275726e2061646d696e206164647265737360408201527f206973207468652073616d6520776974682063757272656e742061646472657360608201527f7300000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526036908201527f4d61737465724368656656323a204e657720626f6f737420636f6e747261637460408201527f2061646472657373206d7573742062652076616c696400000000000000000000606082015260800190565b600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b90815260200190565b9182521515602082015260400190565b9283526020830191909152604082015260600190565b9485526020850193909352604084019190915260608301521515608082015260a00190565b60005b838110156135db5781810151838201526020016135c3565b838111156128535750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461360e57600080fd5b50565b801515811461360e57600080fdfea26469706673582212207ee72d013e0d007c95283a5d1b03a8f2a39136c9f900908971fdc972fc61e6b064736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c75760003560e01c806381bdf98c1161017b578063c40d337b116100d8578063e2bbb1581161008c578063f2fde38b11610071578063f2fde38b1461051c578063f51475bf1461052f578063fd17c4e814610537576102c7565b8063e2bbb158146104f6578063e3d5b97314610509576102c7565b8063cc6db2da116100bd578063cc6db2da146103a9578063d7b79353146104db578063dfcedeee146104ee576102c7565b8063c40d337b146104c0578063c507aeaa146104c8576102c7565b806399d7e84a1161012f578063ac02cef311610114578063ac02cef31461049d578063ac1d0609146104a5578063b1c5d0a6146104b8576102c7565b806399d7e84a146104825780639dd2fcc31461048a576102c7565b806385935f3d1161016057806385935f3d146104455780638da5cb5b1461045857806393f1a40b14610460576102c7565b806381bdf98c1461042a57806384ec76f514610432576102c7565b8063441a3e701161022957806364482f79116101dd578063715018a6116101c2578063715018a61461040757806378db4c341461040f57806378ed5d1f14610417576102c7565b806364482f79146103ec57806369b02128146103ff576102c7565b806351eb05a61161020e57806351eb05a6146103b15780635312ea8e146103d1578063630b5ba1146103e4576102c7565b8063441a3e701461039657806346505f54146103a9576102c7565b80631526fe271161028057806331b108621161026557806331b1086214610366578063372c12b11461036e57806343d220ae1461038e576102c7565b80631526fe271461033a57806322f104021461035e576102c7565b8063041a84c9116102b1578063041a84c91461030a578063081e3eda1461031f5780630bb844bc14610327576102c7565b80626e5447146102cc578063033186e8146102ea575b600080fd5b6102d461053f565b6040516102e19190612d55565b60405180910390f35b6102fd6102f8366004612b6e565b610563565b6040516102e1919061356c565b61031d610318366004612b99565b6105b9565b005b6102fd610931565b61031d610335366004612b1a565b610937565b61034d610348366004612c05565b610aac565b6040516102e195949392919061359b565b6102fd610aed565b6102fd610afa565b61038161037c366004612b1a565b610b00565b6040516102e19190612dcd565b6102fd610b15565b61031d6103a4366004612cab565b610b21565b6102fd610d32565b6103c46103bf366004612c05565b610d3b565b6040516102e19190613530565b61031d6103df366004612c05565b610f11565b61031d61103f565b61031d6103fa366004612ccc565b6110d3565b6102fd61124a565b61031d611254565b6102fd61131f565b6102d4610425366004612c05565b611325565b6102d4611359565b61031d610440366004612bcd565b611375565b6102fd610453366004612c35565b61143b565b6102d46115e7565b61047361046e366004612c35565b611603565b6040516102e193929190613585565b6102fd61162f565b61031d610498366004612b1a565b611635565b6102fd611776565b61031d6104b3366004612b36565b61177c565b61031d6118b0565b6102fd6118b2565b61031d6104d6366004612c59565b6118b8565b61031d6104e9366004612d04565b611c91565b6102d4611df3565b61031d610504366004612cab565b611e0f565b6102fd610517366004612bcd565b6121da565b61031d61052a366004612b1a565b612237565b6102fd61236d565b6102fd61239b565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281206002015464e8d4a5100081116105ad5764e8d4a510006105af565b805b9150505b92915050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061326e565b60405180910390fd5b60026001541415610650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613419565b600260015573ffffffffffffffffffffffffffffffffffffffff83166106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613031565b600482815481106106af57fe5b600091825260209091206004600590920201015460ff166106fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906132cb565b64e8d4a51000811015801561071757506501d1a94a20008111155b61074d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612e29565b610755612ac8565b61075e83610d3b565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452909152812091925061079a8686610563565b90506107a78686836123a1565b6107e7670de0b6b3a76400006107db85600001516107e164e8d4a510006107db8a896000015461247e90919063ffffffff16565b906124d2565b9061247e565b60018301558154610833906108079064e8d4a51000906107db908861247e565b835461082d906108229064e8d4a51000906107db908761247e565b60608701519061251b565b9061255d565b6060840152600480548491908790811061084957fe5b6000918252602080832084516005939093020191825583810151600183015560408085015160028085019190915560608601516003850155608090950151600490930180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092558883526006815281832073ffffffffffffffffffffffffffffffffffffffff8b1680855291529181902090920186905590517f01abd62439b64f6c5dab6f94d56099495bd0c094f9c21f98f4d3562a21edb4ba9061091d90889085908990613585565b60405180910390a250506001805550505050565b60045490565b61093f61259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b73ffffffffffffffffffffffffffffffffffffffff81166109e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061308e565b60025473ffffffffffffffffffffffffffffffffffffffff82811691161415610a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613450565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fd146fe330fdddf682413850a35b28edfccd4c4b53cfee802fd24950de5be1dbe90600090a35050565b60048181548110610ab957fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff1685565b68022b1c8c1227a0000081565b600a5481565b60076020526000908152604090205460ff1681565b670de0b6b3a764000081565b60026001541415610b5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613419565b6002600155610b6b612ac8565b610b7483610d3b565b60008481526006602090815260408083203384529091529020805491925090831115610bcc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906131cb565b6000610bd83386610563565b9050610be53386836123a1565b8315610c3a578154610bf7908561251b565b8260000181905550610c3a338560058881548110610c1157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1691906125a0565b610c6e670de0b6b3a76400006107db85600001516107e164e8d4a510006107db87896000015461247e90919063ffffffff16565b6001830155610cb6610c8964e8d4a510006107db878561247e565b60048781548110610c9657fe5b90600052602060002090600502016003015461251b90919063ffffffff16565b60048681548110610cc357fe5b906000526020600020906005020160030181905550843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56886604051610d1f919061356c565b60405180910390a3505060018055505050565b64e8d4a5100081565b610d43612ac8565b60048281548110610d5057fe5b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004015460ff16151560808201529150431115610f0c5760608101516080820151600090610dc257600954610dc6565b6008545b9050600082118015610dd85750600081115b15610e45576000610df684602001514361251b90919063ffffffff16565b90506000610e1d836107db87604001516107e1610e168a608001516121da565b879061247e565b9050610e40610e38856107db84670de0b6b3a764000061247e565b86519061255d565b855250505b4360208401526004805484919086908110610e5c57fe5b6000918252602091829020835160059290920201908155828201516001820155604080840151600283015560608401516003830155608090930151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558401518451915186927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f4692610f019290918791613585565b60405180910390a250505b919050565b60026001541415610f4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613419565b6002600181905550600060048281548110610f6557fe5b600091825260208083208584526006825260408085203380875293528420805485825560018201869055600590940290910194509290610fbb9064e8d4a51000906107db90610fb49089610563565b859061247e565b905080846003015411610fcf576000610fde565b6003840154610fde908261251b565b8460030181905550610ff8338360058881548110610c1157fe5b843373ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059584604051610d1f919061356c565b60045460005b818110156110cf57611055612ac8565b6004828154811061106257fe5b60009182526020918290206040805160a08101825260059093029091018054835260018101549383019390935260028301549082018190526003830154606083015260049092015460ff16151560808201529150156110c6576110c482610d3b565b505b50600101611045565b5050565b6110db61259c565b60005473ffffffffffffffffffffffffffffffffffffffff90811691161461112f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b61113883610d3b565b5080156111475761114761103f565b6004838154811061115457fe5b600091825260209091206004600590920201015460ff16156111af576111a78261082d6004868154811061118457fe5b90600052602060002090600502016002015460085461251b90919063ffffffff16565b6008556111ea565b6111e68261082d600486815481106111c357fe5b90600052602060002090600502016002015460095461251b90919063ffffffff16565b6009555b81600484815481106111f857fe5b906000526020600020906005020160020181905550827fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f88360405161123d919061356c565b60405180910390a2505050565b6501d1a94a200081565b61125c61259c565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146112b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600d5481565b6005818154811061133257fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b61137d61259c565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146113d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b80156113df576113df61103f565b60006113f6600d544361251b90919063ffffffff16565b9050600061140c61140561236d565b839061247e565b6002549091506114329073ffffffffffffffffffffffffffffffffffffffff1682612646565b505043600d5550565b6000611445612ac8565b6004848154811061145257fe5b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301939093526002830154908201526003820154606082015260049091015460ff161515608082015290506114ac612af9565b50600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252918290208251606080820185528254825260018301548285015260029092015493810193909352835190840151918401519091904311801561151a57508015155b1561159357600061153885602001514361251b90919063ffffffff16565b9050600061156c866080015161155057600954611554565b6008545b6107db88604001516107e1610e168b608001516121da565b905061158e611587846107db84670de0b6b3a764000061247e565b859061255d565b935050505b60006115b364e8d4a510006107db6115ab8a8c610563565b87519061247e565b60208501519091506115db906115d5670de0b6b3a76400006107db858861247e565b9061251b565b98975050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b60095481565b61163d61259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b73ffffffffffffffffffffffffffffffffffffffff8116158015906116d1575060035473ffffffffffffffffffffffffffffffffffffffff828116911614155b611707576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906134d3565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f4c0c07d0b548b824a1b998eb4d11fccf1cfbc1e47edcdb309970ba88315eb30390600090a250565b600c5481565b61178461259c565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146117d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b73ffffffffffffffffffffffffffffffffffffffff8216611825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613328565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600760205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016841515179055517fc551bbb22d0406dbfb8b6b7740cc521bcf44e1106029cf899c19b6a8e4c99d51906118a4908490612dcd565b60405180910390a25050565b565b60085481565b6118c061259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190611969903090600401612d55565b60206040518083038186803b15801561198157600080fd5b505afa158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b99190612c1d565b10156119f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613202565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612f40565b8015611a8557611a8561103f565b8115611aa057600854611a98908561255d565b600855611ab1565b600954611aad908561255d565b6009555b60058054600180820183557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091556040805160a081018252600080825243602083019081529282018a8152606083018281528915156080850190815260048054808a018255945293517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9389029384015593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790559154611c529161251b565b7f18caa0724a26384928efe604ae6ddc99c242548876259770fc88fcb7e719d8fa8685604051611c83929190613575565b60405180910390a350505050565b611c9961259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611ced576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b600084118015611cfd5750600083115b8015611d095750600082115b611d3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612f9d565b64e8d4a51000611d538361082d878761255d565b14611d8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906133bc565b8015611d9857611d9861103f565b611da26000611375565b600a849055600b839055600c8290556040517f915e4ab3f3ef4bbf4ac884cc65c42daeb5c26ee4c0d5b0e7cc2a85025a5f5f5490611de590869086908690613585565b60405180910390a150505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415611e4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613419565b6002600155611e59612ac8565b611e6283610d3b565b6000848152600660209081526040808320338452909152902060808201519192509080611e9e57503360009081526007602052604090205460ff165b611ed4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906130eb565b6000611ee03386610563565b825490915015611ef557611ef53386836123a1565b83156120f157600060058681548110611f0a57fe5b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190611f69903090600401612d55565b60206040518083038186803b158015611f8157600080fd5b505afa158015611f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb99190612c1d565b9050611ff833308760058a81548110611fce57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16929190612832565b6120b8816005888154811061200957fe5b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190612068903090600401612d55565b60206040518083038186803b15801561208057600080fd5b505afa158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d59190612c1d565b83549095506120c7908661255d565b83556120ea6120df64e8d4a510006107db888661247e565b60608601519061255d565b6060850152505b612125670de0b6b3a76400006107db85600001516107e164e8d4a510006107db87896000015461247e90919063ffffffff16565b8260010181905550826004868154811061213b57fe5b6000918252602091829020835160059290920201908155908201516001820155604080830151600283015560608301516003830155608090920151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905551859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590610d1f90889061356c565b600081156122105761220964e8d4a510006107db600b5468022b1c8c1227a0000061247e90919063ffffffff16565b9050610f0c565b6105b364e8d4a510006107db600c5468022b1c8c1227a0000061247e90919063ffffffff16565b61223f61259c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614612293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613239565b73ffffffffffffffffffffffffffffffffffffffff81166122e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612ee3565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061239664e8d4a510006107db600a5468022b1c8c1227a0000061247e90919063ffffffff16565b905090565b600b5481565b6123a9612af9565b50600082815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320815160608101835281548082526001830154948201949094526002909101549181019190915291906124169064e8d4a51000906107db908661247e565b9050600061244e670de0b6b3a76400006107db6004888154811061243657fe5b6000918252602090912060059091020154859061247e565b9050600061246984602001518361251b90919063ffffffff16565b90506124758782612646565b50505050505050565b60008261248d575060006105b3565b8282028284828161249a57fe5b04146105ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061316e565b600061251483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612859565b9392505050565b600061251483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506128aa565b6000828201838110156105ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612ffa565b3390565b6126418363a9059cbb60e01b84846040516024016125bf929190612da7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526128f0565b505050565b80156110cf576040517f70a08231000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906126c0903090600401612d55565b60206040518083038186803b1580156126d857600080fd5b505afa1580156126ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127109190612c1d565b101561271e5761271e6118b0565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612793903090600401612d55565b60206040518083038186803b1580156127ab57600080fd5b505afa1580156127bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e39190612c1d565b9050818110156127f1578091505b61264173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001684846125a0565b612853846323b872dd60e01b8585856040516024016125bf93929190612d76565b50505050565b60008183612894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9190612dd8565b5060008385816128a057fe5b0495945050505050565b600081848411156128e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9190612dd8565b505050900390565b6060612952826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129a69092919063ffffffff16565b80519091501561264157808060200190518101906129709190612be9565b612641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612e86565b60606129b584846000856129bd565b949350505050565b60606129c885612ac2565b6129fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90613385565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051612a289190612d39565b60006040518083038185875af1925050503d8060008114612a65576040519150601f19603f3d011682016040523d82523d6000602084013e612a6a565b606091505b50915091508115612a7e5791506129b59050565b805115612a8e5780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9190612dd8565b3b151590565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b60405180606001604052806000815260200160008152602001600081525090565b600060208284031215612b2b578081fd5b81356105ad816135ec565b60008060408385031215612b48578081fd5b8235612b53816135ec565b91506020830135612b6381613611565b809150509250929050565b60008060408385031215612b80578182fd5b8235612b8b816135ec565b946020939093013593505050565b600080600060608486031215612bad578081fd5b8335612bb8816135ec565b95602085013595506040909401359392505050565b600060208284031215612bde578081fd5b81356105ad81613611565b600060208284031215612bfa578081fd5b81516105ad81613611565b600060208284031215612c16578081fd5b5035919050565b600060208284031215612c2e578081fd5b5051919050565b60008060408385031215612c47578182fd5b823591506020830135612b63816135ec565b60008060008060808587031215612c6e578081fd5b843593506020850135612c80816135ec565b92506040850135612c9081613611565b91506060850135612ca081613611565b939692955090935050565b60008060408385031215612cbd578182fd5b50508035926020909101359150565b600080600060608486031215612ce0578283fd5b83359250602084013591506040840135612cf981613611565b809150509250925092565b60008060008060808587031215612d19578384fd5b8435935060208501359250604085013591506060850135612ca081613611565b60008251612d4b8184602087016135c0565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152612df78160408501602087016135c0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252602a908201527f4d61737465724368656656323a20496e76616c6964206e657720626f6f73742060408201527f6d756c7469706c69657200000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666542455032303a204245503230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f54494b54414b20746f6b656e2063616e277420626520616464656420746f206660408201527f61726d20706f6f6c730000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4d61737465724368656656323a2074696b74616b2072617465206d757374206260408201527f652067726561746572207468616e203000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602c908201527f4d61737465724368656656323a2054686520757365722061646472657373206d60408201527f7573742062652076616c69640000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f4d61737465724368656656323a204275726e2061646d696e206164647265737360408201527f206d7573742062652076616c6964000000000000000000000000000000000000606082015260800190565b60208082526042908201527f4d61737465724368656656323a205468652061646472657373206973206e6f7460408201527f20617661696c61626c6520746f206465706f73697420696e207468697320706f60608201527f6f6c000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f77697468647261773a20496e73756666696369656e7400000000000000000000604082015260600190565b60208082526011908201527f4e6f6e6520424550323020746f6b656e73000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520626f6f737460408201527f20636f6e74726163740000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4d61737465724368656656323a204f6e6c7920726567756c6172206661726d2060408201527f636f756c6420626520626f6f7374656400000000000000000000000000000000606082015260800190565b60208082526032908201527f4d61737465724368656656323a20546865207768697465206c6973742061646460408201527f72657373206d7573742062652076616c69640000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526025908201527f4d61737465724368656656323a20546f74616c2072617465206d75737420626560408201527f2031653132000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526041908201527f4d61737465724368656656323a204275726e2061646d696e206164647265737360408201527f206973207468652073616d6520776974682063757272656e742061646472657360608201527f7300000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526036908201527f4d61737465724368656656323a204e657720626f6f737420636f6e747261637460408201527f2061646472657373206d7573742062652076616c696400000000000000000000606082015260800190565b600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b90815260200190565b9182521515602082015260400190565b9283526020830191909152604082015260600190565b9485526020850193909352604084019190915260608301521515608082015260a00190565b60005b838110156135db5781810151838201526020016135c3565b838111156128535750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461360e57600080fd5b50565b801515811461360e57600080fdfea26469706673582212207ee72d013e0d007c95283a5d1b03a8f2a39136c9f900908971fdc972fc61e6b064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,address,bool,bool)": {
        "params": {
          "_allocPoint": "Number of allocation points for the new pool.",
          "_isRegular": "Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are",
          "_lpToken": "Address of the LP BEP-20 token.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation. only for TIKTAK distributions within PantiktakSwap products."
        }
      },
      "burntiktak(bool)": {
        "params": {
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "constructor": {
        "params": {
          "_TIKTAK": "The TIKTAK token contract address.",
          "_burnAdmin": "The address of burn admin."
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "_amount": "Amount of LP tokens to deposit.",
          "_pid": "The id of the pool. See `poolInfo`."
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`."
        }
      },
      "getBoostMultiplier(address,uint256)": {
        "params": {
          "_pid": "The pool id.",
          "_user": "The user address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingtiktak(uint256,address)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`.",
          "_user": "Address of the user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "set(uint256,uint256,bool)": {
        "params": {
          "_allocPoint": "New number of allocation points for the pool.",
          "_pid": "The id of the pool. See `poolInfo`.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "tiktakPerBlock(bool)": {
        "params": {
          "_isRegular": "If the pool belongs to regular or special."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBoostContract(address)": {
        "params": {
          "_newBoostContract": "The new address for handling all the share boosts."
        }
      },
      "updateBoostMultiplier(address,uint256,uint256)": {
        "params": {
          "_newMultiplier": "New boost multiplier.",
          "_pid": "The pool id for the boost factor updates.",
          "_user": "The user address for boost factor updates."
        }
      },
      "updateBurnAdmin(address)": {
        "params": {
          "_newAdmin": "The new burn admin address."
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      },
      "updateWhiteList(address,bool)": {
        "params": {
          "_isValid": "The flag for valid or invalid.",
          "_user": "The address to be updated."
        }
      },
      "updatetiktakRate(uint256,uint256,uint256,bool)": {
        "params": {
          "_burnRate": "The % of TIKTAK to burn each block.",
          "_regularFarmRate": "The % of TIKTAK to regular pools each block.",
          "_specialFarmRate": "The % of TIKTAK to special pools each block.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "Amount of LP tokens to withdraw.",
          "_pid": "The id of the pool. See `poolInfo`."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BOOST_PRECISION()": {
        "notice": "Basic boost factor, none boosted user's boost factor"
      },
      "MASTERCHEF_TIKTAK_PER_BLOCK()": {
        "notice": "40 tiktaks per block in MCV1"
      },
      "MAX_BOOST_PRECISION()": {
        "notice": "Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION"
      },
      "TIKTAK()": {
        "notice": "Address of TIKTAK contract."
      },
      "TIKTAK_RATE_TOTAL_PRECISION()": {
        "notice": "total tiktak rate = toBurn + toRegular + toSpecial"
      },
      "add(uint256,address,bool,bool)": {
        "notice": "Add a new pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
      },
      "boostContract()": {
        "notice": "The contract handles the share boosts."
      },
      "burnAdmin()": {
        "notice": "The only address can withdraw all the burn TIKTAK."
      },
      "burntiktak(bool)": {
        "notice": "Send TIKTAK pending for burn to `burnAdmin`."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit LP tokens to pool."
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about the rewards. EMERGENCY ONLY."
      },
      "getBoostMultiplier(address,uint256)": {
        "notice": "Get user boost multiplier for specific pool id."
      },
      "harvestRewardsFromOwner()": {
        "notice": "Harvests TIKTAK from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to MCV2."
      },
      "lpToken(uint256)": {
        "notice": "Address of the LP token for each MCV2 pool."
      },
      "massUpdatePools()": {
        "notice": "Update tiktak reward for all the active pools. Be careful of gas spending!"
      },
      "pendingtiktak(uint256,address)": {
        "notice": "View function for checking pending TIKTAK rewards."
      },
      "poolInfo(uint256)": {
        "notice": "Info of each MCV2 pool."
      },
      "poolLength()": {
        "notice": "Returns the number of MCV2 pools."
      },
      "set(uint256,uint256,bool)": {
        "notice": "Update the given pool's TIKTAK allocation point. Can only be called by the owner."
      },
      "tiktakPerBlock(bool)": {
        "notice": "Calculates and returns the `amount` of TIKTAK per block."
      },
      "tiktakPerBlockToBurn()": {
        "notice": "Calculates and returns the `amount` of TIKTAK per block to burn."
      },
      "tiktakRateToBurn()": {
        "notice": "The last block number of TIKTAK burn action being executed.TIKTAK distribute % for burn"
      },
      "tiktakRateToRegularFarm()": {
        "notice": "TIKTAK distribute % for regular farm pool"
      },
      "tiktakRateToSpecialFarm()": {
        "notice": "TIKTAK distribute % for special pools"
      },
      "totalRegularAllocPoint()": {
        "notice": "Total regular allocation points. Must be the sum of all regular pools' allocation points."
      },
      "totalSpecialAllocPoint()": {
        "notice": "Total special allocation points. Must be the sum of all special pools' allocation points."
      },
      "updateBoostContract(address)": {
        "notice": "Update boost contract address and max boost factor."
      },
      "updateBoostMultiplier(address,uint256,uint256)": {
        "notice": "Update user boost factor."
      },
      "updateBurnAdmin(address)": {
        "notice": "Update burn admin address."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables for the given pool."
      },
      "updateWhiteList(address,bool)": {
        "notice": "Update whitelisted addresses for special pools."
      },
      "updatetiktakRate(uint256,uint256,uint256,bool)": {
        "notice": "Update the % of TIKTAK distributions for burn, regular pools and special pools."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each pool user."
      },
      "whiteList(address)": {
        "notice": "The whitelist of addresses allowed to deposit in special pools."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw LP tokens from pool."
      }
    },
    "notice": "The (older) MasterChef contract gives out a constant number of TIKTAK tokens per block. It is the only address with minting rights for TIKTAK. The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token that is deposited into the MasterChef V1 (MCV1) contract. The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 533,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 606,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "burnAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 609,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "boostContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 613,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)600_storage)dyn_storage"
      },
      {
        "astId": 617,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "lpToken",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(IBEP20)2457)dyn_storage"
      },
      {
        "astId": 624,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)589_storage))"
      },
      {
        "astId": 629,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "whiteList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 632,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "totalRegularAllocPoint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 635,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "totalSpecialAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 664,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "tiktakRateToBurn",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 668,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "tiktakRateToRegularFarm",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 672,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "tiktakRateToSpecialFarm",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 674,
        "contract": "contracts/MasterchefV2.sol:MasterChefV2",
        "label": "lastBurnedBlock",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IBEP20)2457)dyn_storage": {
        "base": "t_contract(IBEP20)2457",
        "encoding": "dynamic_array",
        "label": "contract IBEP20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)600_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)600_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChefV2.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBEP20)2457": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)589_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChefV2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)589_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)589_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterChefV2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)589_storage)"
      },
      "t_struct(PoolInfo)600_storage": {
        "encoding": "inplace",
        "label": "struct MasterChefV2.PoolInfo",
        "members": [
          {
            "astId": 591,
            "contract": "contracts/MasterchefV2.sol:MasterChefV2",
            "label": "acctiktakPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 593,
            "contract": "contracts/MasterchefV2.sol:MasterChefV2",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 595,
            "contract": "contracts/MasterchefV2.sol:MasterChefV2",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 597,
            "contract": "contracts/MasterchefV2.sol:MasterChefV2",
            "label": "totalBoostedShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 599,
            "contract": "contracts/MasterchefV2.sol:MasterChefV2",
            "label": "isRegular",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)589_storage": {
        "encoding": "inplace",
        "label": "struct MasterChefV2.UserInfo",
        "members": [
          {
            "astId": 584,
            "contract": "contracts/MasterchefV2.sol:MasterChefV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 586,
            "contract": "contracts/MasterchefV2.sol:MasterChefV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 588,
            "contract": "contracts/MasterchefV2.sol:MasterChefV2",
            "label": "boostMultiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}