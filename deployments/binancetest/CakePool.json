{
  "address": "0x1AdC14833170490fE8f81b1b52c4308363733B65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IMasterChefV2",
          "name": "_masterchefV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastDepositedTime",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "free",
          "type": "bool"
        }
      ],
      "name": "FreeFeeUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "boostContract",
          "type": "address"
        }
      ],
      "name": "NewBoostContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boostWeight",
          "type": "uint256"
        }
      ],
      "name": "NewBoostWeight",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "durationFactor",
          "type": "uint256"
        }
      ],
      "name": "NewDurationFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "durationFactorOverdue",
          "type": "uint256"
        }
      ],
      "name": "NewDurationFactorOverdue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLockDuration",
          "type": "uint256"
        }
      ],
      "name": "NewMaxLockDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "NewOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "overdueFee",
          "type": "uint256"
        }
      ],
      "name": "NewOverdueFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        }
      ],
      "name": "NewPerformanceFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFeeContract",
          "type": "uint256"
        }
      ],
      "name": "NewPerformanceFeeContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockFreeDuration",
          "type": "uint256"
        }
      ],
      "name": "NewUnlockFreeDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "VCake",
          "type": "address"
        }
      ],
      "name": "NewVCakeContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawFee",
          "type": "uint256"
        }
      ],
      "name": "NewWithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawFeeContract",
          "type": "uint256"
        }
      ],
      "name": "NewWithdrawFeeContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawFeePeriod",
          "type": "uint256"
        }
      ],
      "name": "NewWithdrawFeePeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOOST_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOST_WEIGHT_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DURATION_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DURATION_FACTOR_OVERDUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOCK_DURATION_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_OVERDUE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERFORMANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAW_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAW_FEE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_DEPOSIT_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_WITHDRAW_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_FACTOR_SHARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNLOCK_FREE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VCake",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "available",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cakePoolPID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateOverdueFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculatePerformanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateTotalPendingCakeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeOverdueFeeUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freePerformanceFeeUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeWithdrawFeeUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "dummyToken",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchefV2",
      "outputs": [
        {
          "internalType": "contract IMasterChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "overdueFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFeeContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boostContract",
          "type": "address"
        }
      ],
      "name": "setBoostContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boostWeight",
          "type": "uint256"
        }
      ],
      "name": "setBoostWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationFactor",
          "type": "uint256"
        }
      ],
      "name": "setDurationFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationFactorOverdue",
          "type": "uint256"
        }
      ],
      "name": "setDurationFactorOverdue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_free",
          "type": "bool"
        }
      ],
      "name": "setFreePerformanceFeeUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLockDuration",
          "type": "uint256"
        }
      ],
      "name": "setMaxLockDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_overdueFee",
          "type": "uint256"
        }
      ],
      "name": "setOverdueFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_free",
          "type": "bool"
        }
      ],
      "name": "setOverdueFeeUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceFeeContract",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFeeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlockFreeDuration",
          "type": "uint256"
        }
      ],
      "name": "setUnlockFreeDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VCake",
          "type": "address"
        }
      ],
      "name": "setVCakeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFeeContract",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFeeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFeePeriod",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFeePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_free",
          "type": "bool"
        }
      ],
      "name": "setWithdrawFeeUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBoostDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cakeAtLastUserAction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUserActionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userBoostedShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawByAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf28e73a75efc72b72257aac16125d86d2649f7cd8a6d4efd8ec46081c98b849",
  "receipt": {
    "to": null,
    "from": "0xA8c344b867d0697197d4Df75c807cf023f537b38",
    "contractAddress": "0x1AdC14833170490fE8f81b1b52c4308363733B65",
    "transactionIndex": 3,
    "gasUsed": "5072330",
    "logsBloom": "0x
    "blockHash": "0xb90f2510abe21c15e14847616fb666c70f3d009365900a59a4241e749ef1ebd7",
    "transactionHash": "0xdf28e73a75efc72b72257aac16125d86d2649f7cd8a6d4efd8ec46081c98b849",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 26193000,
        "transactionHash": "0xdf28e73a75efc72b72257aac16125d86d2649f7cd8a6d4efd8ec46081c98b849",
        "address": "0x1AdC14833170490fE8f81b1b52c4308363733B65",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a8c344b867d0697197d4df75c807cf023f537b38"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xb90f2510abe21c15e14847616fb666c70f3d009365900a59a4241e749ef1ebd7"
      }
    ],
    "blockNumber": 26193000,
    "cumulativeGasUsed": "5389975",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x483Ed007BA31da2D570bA816F028135d1F0c60A6",
    "0x992C14F0AEdAB365e0bccaD3c84FFEa5844532C0",
    "0xA8c344b867d0697197d4Df75c807cf023f537b38",
    "0xA8c344b867d0697197d4Df75c807cf023f537b38",
    "0xA8c344b867d0697197d4Df75c807cf023f537b38",
    0
  ],
  "solcInputHash": "fd21b0eb6b62d9c70847699da4cb3d7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChefV2\",\"name\":\"_masterchefV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"}],\"name\":\"FreeFeeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boostContract\",\"type\":\"address\"}],\"name\":\"NewBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostWeight\",\"type\":\"uint256\"}],\"name\":\"NewBoostWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationFactor\",\"type\":\"uint256\"}],\"name\":\"NewDurationFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationFactorOverdue\",\"type\":\"uint256\"}],\"name\":\"NewDurationFactorOverdue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLockDuration\",\"type\":\"uint256\"}],\"name\":\"NewMaxLockDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overdueFee\",\"type\":\"uint256\"}],\"name\":\"NewOverdueFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"NewPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeContract\",\"type\":\"uint256\"}],\"name\":\"NewPerformanceFeeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockFreeDuration\",\"type\":\"uint256\"}],\"name\":\"NewUnlockFreeDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"VCake\",\"type\":\"address\"}],\"name\":\"NewVCakeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFeeContract\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFeeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFeePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOST_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_WEIGHT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION_FACTOR_OVERDUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_DURATION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OVERDUE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_FREE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VCake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePoolPID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateOverdueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculatePerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalPendingCakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeOverdueFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freePerformanceFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeWithdrawFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"dummyToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefV2\",\"outputs\":[{\"internalType\":\"contract IMasterChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overdueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boostContract\",\"type\":\"address\"}],\"name\":\"setBoostContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boostWeight\",\"type\":\"uint256\"}],\"name\":\"setBoostWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationFactor\",\"type\":\"uint256\"}],\"name\":\"setDurationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationFactorOverdue\",\"type\":\"uint256\"}],\"name\":\"setDurationFactorOverdue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setFreePerformanceFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLockDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_overdueFee\",\"type\":\"uint256\"}],\"name\":\"setOverdueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setOverdueFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeContract\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockFreeDuration\",\"type\":\"uint256\"}],\"name\":\"setUnlockFreeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VCake\",\"type\":\"address\"}],\"name\":\"setVCakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeContract\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setWithdrawFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoostDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cakeAtLastUserAction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUserActionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"available()\":{\"details\":\"The contract puts 100% of the tokens to work.\"},\"balanceOf()\":{\"details\":\"It includes tokens held by the contract and the boost debt amount.\"},\"calculateOverdueFee(address)\":{\"params\":{\"_user\":\": User address\"},\"returns\":{\"_0\":\"Returns Overdue fee.\"}},\"calculatePerformanceFee(address)\":{\"params\":{\"_user\":\": User address\"},\"returns\":{\"_0\":\"Returns Performance fee.\"}},\"calculateTotalPendingCakeRewards()\":{\"returns\":{\"_0\":\"Returns total pending cake rewards\"}},\"calculateWithdrawFee(address,uint256)\":{\"params\":{\"_shares\":\": Number of shares to withdraw\",\"_user\":\": User address\"},\"returns\":{\"_0\":\"Returns Withdraw fee.\"}},\"constructor\":{\"params\":{\"_admin\":\": address of the admin\",\"_masterchefV2\":\": MasterChefV2 contract\",\"_operator\":\": address of operator\",\"_pid\":\": cake pool ID in MasterChefV2\",\"_token\":\": Cake token contract\",\"_treasury\":\": address of the treasury (collects fees)\"}},\"deposit(uint256,uint256)\":{\"details\":\"Only possible when contract not paused.\",\"params\":{\"_amount\":\": number of tokens to deposit (in CAKE)\",\"_lockDuration\":\": Token lock duration\"}},\"init(address)\":{\"params\":{\"dummyToken\":\"The address of the token to be deposited into MCV2.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only possible when contract not paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAdmin(address)\":{\"details\":\"Only callable by the contract owner.\"},\"setBoostContract(address)\":{\"details\":\"Callable by the contract admin.\"},\"setBoostWeight(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setDurationFactor(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setDurationFactorOverdue(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setFreePerformanceFeeUser(address,bool)\":{\"details\":\"Only callable by the contract admin.\",\"params\":{\"_free\":\": true:free false:not free\",\"_user\":\": User address\"}},\"setMaxLockDuration(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setOperator(address)\":{\"details\":\"Callable by the contract owner.\"},\"setOverdueFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setOverdueFeeUser(address,bool)\":{\"details\":\"Only callable by the contract admin.\",\"params\":{\"_free\":\": true:free false:not free\",\"_user\":\": User address\"}},\"setPerformanceFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setPerformanceFeeContract(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setTreasury(address)\":{\"details\":\"Only callable by the contract owner.\"},\"setUnlockFreeDuration(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setVCakeContract(address)\":{\"details\":\"Callable by the contract admin.\"},\"setWithdrawFee(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setWithdrawFeeContract(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setWithdrawFeePeriod(uint256)\":{\"details\":\"Only callable by the contract admin.\"},\"setWithdrawFeeUser(address,bool)\":{\"details\":\"Only callable by the contract admin.\",\"params\":{\"_free\":\": true:free false:not free\",\"_user\":\": User address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(address)\":{\"details\":\"Only possible when contract not paused.\",\"params\":{\"_user\":\": User address\"}},\"unpause()\":{\"details\":\"Only possible when contract is paused.\"},\"withdraw(uint256)\":{\"params\":{\"_shares\":\": Number of shares to withdraw\"}},\"withdrawByAmount(uint256)\":{\"params\":{\"_amount\":\": Number of amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"available()\":{\"notice\":\"Current pool available balance\"},\"balanceOf()\":{\"notice\":\"Calculates the total underlying tokens\"},\"calculateOverdueFee(address)\":{\"notice\":\"Calculate overdue fee.\"},\"calculatePerformanceFee(address)\":{\"notice\":\"Calculate Performance fee.\"},\"calculateTotalPendingCakeRewards()\":{\"notice\":\"Calculates the total pending rewards that can be harvested\"},\"calculateWithdrawFee(address,uint256)\":{\"notice\":\"Calculate withdraw fee.\"},\"constructor\":{\"notice\":\"Constructor\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit funds into the Cake Pool.\"},\"inCaseTokensGetStuck(address)\":{\"notice\":\"Withdraw unexpected tokens sent to the Cake Pool\"},\"init(address)\":{\"notice\":\"Deposits a dummy token to `MASTER_CHEF` MCV2. It will transfer all the `dummyToken` in the tx sender address.\"},\"pause()\":{\"notice\":\"Trigger stopped state\"},\"setAdmin(address)\":{\"notice\":\"Set admin address\"},\"setBoostContract(address)\":{\"notice\":\"Set Boost Contract address\"},\"setBoostWeight(uint256)\":{\"notice\":\"Set BOOST_WEIGHT\"},\"setDurationFactor(uint256)\":{\"notice\":\"Set DURATION_FACTOR\"},\"setDurationFactorOverdue(uint256)\":{\"notice\":\"Set DURATION_FACTOR_OVERDUE\"},\"setFreePerformanceFeeUser(address,bool)\":{\"notice\":\"Set free performance fee address\"},\"setMaxLockDuration(uint256)\":{\"notice\":\"Set MAX_LOCK_DURATION\"},\"setOperator(address)\":{\"notice\":\"Set operator address\"},\"setOverdueFee(uint256)\":{\"notice\":\"Set overdue fee\"},\"setOverdueFeeUser(address,bool)\":{\"notice\":\"Set free overdue fee address\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Set performance fee\"},\"setPerformanceFeeContract(uint256)\":{\"notice\":\"Set performance fee for contract\"},\"setTreasury(address)\":{\"notice\":\"Set treasury address\"},\"setUnlockFreeDuration(uint256)\":{\"notice\":\"Set UNLOCK_FREE_DURATION\"},\"setVCakeContract(address)\":{\"notice\":\"Set VCake Contract address\"},\"setWithdrawFee(uint256)\":{\"notice\":\"Set withdraw fee\"},\"setWithdrawFeeContract(uint256)\":{\"notice\":\"Set withdraw fee for contract\"},\"setWithdrawFeePeriod(uint256)\":{\"notice\":\"Set withdraw fee period\"},\"setWithdrawFeeUser(address,bool)\":{\"notice\":\"Set free withdraw fee address\"},\"unlock(address)\":{\"notice\":\"Unlock user cake funds.\"},\"unpause()\":{\"notice\":\"Return to normal state\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw funds from the Cake Pool.\"},\"withdrawAll()\":{\"notice\":\"Withdraw all funds for a user\"},\"withdrawByAmount(uint256)\":{\"notice\":\"Withdraw funds from the Cake Pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CakePool.sol\":\"CakePool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CakePool.sol\":{\"content\":\"    // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/IMasterChefV2.sol\\\";\\nimport \\\"./interfaces/IBoostContract.sol\\\";\\nimport \\\"./interfaces/IVCake.sol\\\";\\n\\n\\ncontract CakePool is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 shares; // number of shares for a user.\\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\\n        uint256 cakeAtLastUserAction; // keep track of cake deposited at the last user action.\\n        uint256 lastUserActionTime; // keep track of the last user action time.\\n        uint256 lockStartTime; // lock start time.\\n        uint256 lockEndTime; // lock end time.\\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\\n        bool locked; //lock status.\\n        uint256 lockedAmount; // amount deposited during lock period.\\n    }\\n\\n    IERC20 public immutable token; // cake token.\\n\\n    IMasterChefV2 public immutable masterchefV2;\\n\\n    address public boostContract; // boost contract used in Masterchef.\\n    address public VCake;\\n\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => bool) public freePerformanceFeeUsers; // free performance fee users.\\n    mapping(address => bool) public freeWithdrawFeeUsers; // free withdraw fee users.\\n    mapping(address => bool) public freeOverdueFeeUsers; // free overdue fee users.\\n\\n    uint256 public totalShares;\\n    address public admin;\\n    address public treasury;\\n    address public operator;\\n    uint256 public cakePoolPID;\\n    uint256 public totalBoostDebt; // total boost debt.\\n    uint256 public totalLockedAmount; // total lock amount.\\n\\n    uint256 public constant MAX_PERFORMANCE_FEE = 2000; // 20%\\n    uint256 public constant MAX_WITHDRAW_FEE = 500; // 5%\\n    uint256 public constant MAX_OVERDUE_FEE = 100 * 1e10; // 100%\\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 1 weeks; // 1 week\\n    uint256 public constant MIN_LOCK_DURATION = 1 weeks; // 1 week\\n    uint256 public constant MAX_LOCK_DURATION_LIMIT = 1000 days; // 1000 days\\n    uint256 public constant BOOST_WEIGHT_LIMIT = 5000 * 1e10; // 5000%\\n    uint256 public constant PRECISION_FACTOR = 1e12; // precision factor.\\n    uint256 public constant PRECISION_FACTOR_SHARE = 1e28; // precision factor for share.\\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 0.00001 ether;\\n    uint256 public constant MIN_WITHDRAW_AMOUNT = 0.00001 ether;\\n    uint256 public UNLOCK_FREE_DURATION = 1 weeks; // 1 week\\n    uint256 public MAX_LOCK_DURATION = 365 days; // 365 days\\n    uint256 public DURATION_FACTOR = 365 days; // 365 days, in order to calculate user additional boost.\\n    uint256 public DURATION_FACTOR_OVERDUE = 180 days; // 180 days, in order to calculate overdue fee.\\n    uint256 public BOOST_WEIGHT = 100 * 1e10; // 100%\\n\\n    uint256 public performanceFee = 200; // 2%\\n    uint256 public performanceFeeContract = 200; // 2%\\n    uint256 public withdrawFee = 10; // 0.1%\\n    uint256 public withdrawFeeContract = 10; // 0.1%\\n    uint256 public overdueFee = 100 * 1e10; // 100%\\n    uint256 public withdrawFeePeriod = 72 hours; // 3 days\\n\\n    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 duration, uint256 lastDepositedTime);\\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\\n    event Harvest(address indexed sender, uint256 amount);\\n    event Pause();\\n    event Unpause();\\n    event Init();\\n    event Lock(\\n        address indexed sender,\\n        uint256 lockedAmount,\\n        uint256 shares,\\n        uint256 lockedDuration,\\n        uint256 blockTimestamp\\n    );\\n    event Unlock(address indexed sender, uint256 amount, uint256 blockTimestamp);\\n    event NewAdmin(address admin);\\n    event NewTreasury(address treasury);\\n    event NewOperator(address operator);\\n    event NewBoostContract(address boostContract) ;\\n    event NewVCakeContract(address VCake);\\n    event FreeFeeUser(address indexed user, bool indexed free);\\n    event NewPerformanceFee(uint256 performanceFee);\\n    event NewPerformanceFeeContract(uint256 performanceFeeContract);\\n    event NewWithdrawFee(uint256 withdrawFee);\\n    event NewOverdueFee(uint256 overdueFee);\\n    event NewWithdrawFeeContract(uint256 withdrawFeeContract);\\n    event NewWithdrawFeePeriod(uint256 withdrawFeePeriod);\\n    event NewMaxLockDuration(uint256 maxLockDuration);\\n    event NewDurationFactor(uint256 durationFactor);\\n    event NewDurationFactorOverdue(uint256 durationFactorOverdue);\\n    event NewUnlockFreeDuration(uint256 unlockFreeDuration);\\n    event NewBoostWeight(uint256 boostWeight);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _token: Cake token contract\\n     * @param _masterchefV2: MasterChefV2 contract\\n     * @param _admin: address of the admin\\n     * @param _treasury: address of the treasury (collects fees)\\n     * @param _operator: address of operator\\n     * @param _pid: cake pool ID in MasterChefV2\\n     */\\n    constructor(\\n        IERC20 _token,\\n        IMasterChefV2 _masterchefV2,\\n        address _admin,\\n        address _treasury,\\n        address _operator,\\n        uint256 _pid\\n    ) {\\n        token = _token;\\n        masterchefV2 = _masterchefV2;\\n        admin = _admin;\\n        treasury = _treasury;\\n        operator = _operator;\\n        cakePoolPID = _pid;\\n    }\\n\\n    /**\\n     * @notice Deposits a dummy token to `MASTER_CHEF` MCV2.\\n     * It will transfer all the `dummyToken` in the tx sender address.\\n     * @param dummyToken The address of the token to be deposited into MCV2.\\n     */\\n    function init(IERC20 dummyToken) external onlyOwner {\\n        uint256 balance = dummyToken.balanceOf(msg.sender);\\n        require(balance != 0, \\\"Balance must exceed 0\\\");\\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\\n        dummyToken.approve(address(masterchefV2), balance);\\n        masterchefV2.deposit(cakePoolPID, balance);\\n        emit Init();\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"admin: wut?\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is either the cake owner address or the operator address.\\n     */\\n    modifier onlyOperatorOrCakeOwner(address _user) {\\n        require(msg.sender == _user || msg.sender == operator, \\\"Not operator or cake owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update user info in Boost Contract.\\n     * @param _user: User address\\n     */\\n    function updateBoostContractInfo(address _user) internal {\\n        if (boostContract != address(0)) {\\n            UserInfo storage user = userInfo[_user];\\n            uint256 lockDuration = user.lockEndTime - user.lockStartTime;\\n            IBoostContract(boostContract).onCakePoolUpdate(\\n                _user,\\n                user.lockedAmount,\\n                lockDuration,\\n                totalLockedAmount,\\n                DURATION_FACTOR\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Update user share When need to unlock or charges a fee.\\n     * @param _user: User address\\n     */\\n    function updateUserShare(address _user) internal {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares > 0) {\\n            if (user.locked) {\\n                // Calculate the user's current token amount and update related parameters.\\n                uint256 currentAmount = (balanceOf() * (user.shares)) / totalShares - user.userBoostedShare;\\n\\n                totalBoostDebt -= user.userBoostedShare;\\n                user.userBoostedShare = 0;\\n                totalShares -= user.shares;\\n                //Charge a overdue fee after the free duration has expired.\\n                if (!freeOverdueFeeUsers[_user] && ((user.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)) {\\n                    uint256 earnAmount = currentAmount - user.lockedAmount;\\n                    uint256 overdueDuration = block.timestamp - user.lockEndTime - UNLOCK_FREE_DURATION;\\n                    if (overdueDuration > DURATION_FACTOR_OVERDUE) {\\n                        overdueDuration = DURATION_FACTOR_OVERDUE;\\n                    }\\n                    // Rates are calculated based on the user's overdue duration.\\n                    uint256 overdueWeight = (overdueDuration * overdueFee) / DURATION_FACTOR_OVERDUE;\\n                    uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\\n                    token.safeTransfer(treasury, currentOverdueFee);\\n                    currentAmount -= currentOverdueFee;\\n                }\\n                // Recalculate the user's share.\\n                uint256 pool = balanceOf();\\n                uint256 currentShares;\\n\\n\\n\\n                if (totalShares != 0) {\\n                    currentShares = (currentAmount * totalShares) / (pool - currentAmount);\\n                } else {\\n                    currentShares = currentAmount;\\n                }\\n                user.shares = currentShares;\\n                totalShares += currentShares;\\n\\n\\n\\n                // After the lock duration, update related parameters.\\n                if (user.lockEndTime < block.timestamp) {\\n                    user.locked = false;\\n                    user.lockStartTime = 0;\\n                    user.lockEndTime = 0;\\n                    totalLockedAmount -= user.lockedAmount;\\n                    user.lockedAmount = 0;\\n                    emit Unlock(_user, currentAmount, block.timestamp);\\n                }\\n            } else if (!freePerformanceFeeUsers[_user]) {\\n                // Calculate Performance fee.\\n                uint256 totalAmount = (user.shares * balanceOf()) / totalShares;\\n                totalShares -= user.shares;\\n                user.shares = 0;\\n                uint256 earnAmount = totalAmount - user.cakeAtLastUserAction;\\n                uint256 feeRate = performanceFee;\\n                if (_isContract(_user)) {\\n                    feeRate = performanceFeeContract;\\n                }\\n                uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\\n                if (currentPerformanceFee > 0) {\\n                    token.safeTransfer(treasury, currentPerformanceFee);\\n                    totalAmount -= currentPerformanceFee;\\n                }\\n                // Recalculate the user's share.\\n                uint256 pool = balanceOf();\\n                uint256 newShares;\\n                if (totalShares != 0) {\\n                    newShares = (totalAmount * totalShares) / (pool - totalAmount);\\n                } else {\\n                    newShares = totalAmount;\\n                }\\n                user.shares = newShares;\\n                totalShares += newShares;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Unlock user cake funds.\\n     * @dev Only possible when contract not paused.\\n     * @param _user: User address\\n     */\\n    function unlock(address _user) external onlyOperatorOrCakeOwner(_user) whenNotPaused {\\n        UserInfo storage user = userInfo[_user];\\n        require(user.locked && user.lockEndTime < block.timestamp, \\\"Cannot unlock yet\\\");\\n        depositOperation(0, 0, _user);\\n    }\\n\\n    /**\\n     * @notice Deposit funds into the Cake Pool.\\n     * @dev Only possible when contract not paused.\\n     * @param _amount: number of tokens to deposit (in CAKE)\\n     * @param _lockDuration: Token lock duration\\n     */\\n    function deposit(uint256 _amount, uint256 _lockDuration) external whenNotPaused {\\n        require(_amount > 0 || _lockDuration > 0, \\\"Nothing to deposit\\\");\\n        depositOperation(_amount, _lockDuration, msg.sender);\\n    }\\n\\n    /**\\n     * @notice The operation of deposite.\\n     * @param _amount: number of tokens to deposit (in CAKE)\\n     * @param _lockDuration: Token lock duration\\n     * @param _user: User address\\n     */\\n    function depositOperation(\\n        uint256 _amount,\\n        uint256 _lockDuration,\\n        address _user\\n    ) internal {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares == 0 || _amount > 0) {\\n            require(_amount > MIN_DEPOSIT_AMOUNT, \\\"Deposit amount must be greater than MIN_DEPOSIT_AMOUNT\\\");\\n        }\\n        // Calculate the total lock duration and check whether the lock duration meets the conditions.\\n        uint256 totalLockDuration = _lockDuration;\\n        if (user.lockEndTime >= block.timestamp) {\\n            // Adding funds during the lock duration is equivalent to re-locking the position, needs to update some variables.\\n            if (_amount > 0) {\\n                user.lockStartTime = block.timestamp;\\n                totalLockedAmount -= user.lockedAmount;\\n                user.lockedAmount = 0;\\n            }\\n            totalLockDuration += user.lockEndTime - user.lockStartTime;\\n        }\\n        require(_lockDuration == 0 || totalLockDuration >= MIN_LOCK_DURATION, \\\"Minimum lock period is one week\\\");\\n        require(totalLockDuration <= MAX_LOCK_DURATION, \\\"Maximum lock period exceeded\\\");\\n\\n        if (VCake != address(0)) {\\n            IVCake(VCake).deposit(_user, _amount, _lockDuration);\\n        }\\n\\n        // Harvest tokens from Masterchef.\\n        harvest();\\n\\n        // Handle stock funds.\\n        if (totalShares == 0) {\\n            uint256 stockAmount = available();\\n            token.safeTransfer(treasury, stockAmount);\\n        }\\n        // Update user share.\\n        updateUserShare(_user);\\n\\n        // Update lock duration.\\n        if (_lockDuration > 0) {\\n            if (user.lockEndTime < block.timestamp) {\\n                user.lockStartTime = block.timestamp;\\n                user.lockEndTime = block.timestamp + _lockDuration;\\n            } else {\\n                user.lockEndTime += _lockDuration;\\n            }\\n            user.locked = true;\\n        }\\n\\n        uint256 currentShares;\\n        uint256 currentAmount;\\n        uint256 userCurrentLockedBalance;\\n        uint256 pool = balanceOf();\\n\\n\\n\\n        if (_amount > 0) {\\n            token.safeTransferFrom(_user, address(this), _amount);\\n            currentAmount = _amount;\\n        }\\n\\n        // Calculate lock funds\\n        if (user.shares > 0 && user.locked) {\\n            userCurrentLockedBalance = (pool * user.shares) / totalShares;\\n\\n            currentAmount += userCurrentLockedBalance;\\n            totalShares -= user.shares;\\n            user.shares = 0;\\n\\n            // Update lock amount\\n            if (user.lockStartTime == block.timestamp) {\\n                user.lockedAmount = userCurrentLockedBalance;\\n                totalLockedAmount += user.lockedAmount;\\n            }\\n        }\\n\\n        if (totalShares != 0) {\\n            currentShares = (currentAmount * totalShares) / (pool - userCurrentLockedBalance);\\n        } else {\\n            currentShares = currentAmount;\\n        }\\n\\n\\n\\n        // Calculate the boost weight share.\\n        if (user.lockEndTime > user.lockStartTime) {\\n            // Calculate boost share.\\n            uint256 boostWeight = ((user.lockEndTime - user.lockStartTime) * BOOST_WEIGHT) / DURATION_FACTOR;\\n            uint256 boostShares = (boostWeight * currentShares) / PRECISION_FACTOR;\\n            currentShares += boostShares;\\n            user.shares += currentShares;\\n\\n            // Calculate boost share , the user only enjoys the reward, so the principal needs to be recorded as a debt.\\n            uint256 userBoostedShare = (boostWeight * currentAmount) / PRECISION_FACTOR;\\n            user.userBoostedShare += userBoostedShare;\\n            totalBoostDebt += userBoostedShare;\\n\\n            // Update lock amount.\\n            user.lockedAmount += _amount;\\n            totalLockedAmount += _amount;\\n\\n            emit Lock(_user, user.lockedAmount, user.shares, (user.lockEndTime - user.lockStartTime), block.timestamp);\\n        } else {\\n            user.shares += currentShares;\\n        }\\n\\n        if (_amount > 0 || _lockDuration > 0) {\\n            user.lastDepositedTime = block.timestamp;\\n        }\\n        totalShares += currentShares;\\n\\n        user.cakeAtLastUserAction = (user.shares * balanceOf()) / totalShares - user.userBoostedShare;\\n        user.lastUserActionTime = block.timestamp;\\n\\n        // Update user info in Boost Contract.\\n        updateBoostContractInfo(_user);\\n\\n        emit Deposit(_user, _amount, currentShares, _lockDuration, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from the Cake Pool.\\n     * @param _amount: Number of amount to withdraw\\n     */\\n    function withdrawByAmount(uint256 _amount) public whenNotPaused {\\n        require(_amount > MIN_WITHDRAW_AMOUNT, \\\"Withdraw amount must be greater than MIN_WITHDRAW_AMOUNT\\\");\\n        withdrawOperation(0, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from the Cake Pool.\\n     * @param _shares: Number of shares to withdraw\\n     */\\n    function withdraw(uint256 _shares) public whenNotPaused {\\n        require(_shares > 0, \\\"Nothing to withdraw\\\");\\n        withdrawOperation(_shares, 0);\\n    }\\n\\n    /**\\n     * @notice The operation of withdraw.\\n     * @param _shares: Number of shares to withdraw\\n     * @param _amount: Number of amount to withdraw\\n     */\\n    function withdrawOperation(uint256 _shares, uint256 _amount) internal {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(_shares <= user.shares, \\\"Withdraw amount exceeds balance\\\");\\n        require(user.lockEndTime < block.timestamp, \\\"Still in lock\\\");\\n\\n        if (VCake != address(0)) {\\n            IVCake(VCake).withdraw(msg.sender);\\n        }\\n\\n        // Calculate the percent of withdraw shares, when unlocking or calculating the Performance fee, the shares will be updated.\\n        uint256 currentShare = _shares;\\n        uint256 sharesPercent = (_shares * PRECISION_FACTOR_SHARE) / user.shares;\\n\\n        // Harvest token from MasterchefV2.\\n        harvest();\\n\\n        // Update user share.\\n        updateUserShare(msg.sender);\\n\\n        if (_shares == 0 && _amount > 0) {\\n            uint256 pool = balanceOf();\\n            currentShare = (_amount * totalShares) / pool; // Calculate equivalent shares\\n            if (currentShare > user.shares) {\\n                currentShare = user.shares;\\n            }\\n        } else {\\n            currentShare = (sharesPercent * user.shares) / PRECISION_FACTOR_SHARE;\\n        }\\n        \\n        uint256 currentAmount = (balanceOf() * currentShare) / totalShares;\\n        user.shares -= currentShare;\\n        totalShares -= currentShare;\\n\\n        // Calculate withdraw fee\\n        if (!freeWithdrawFeeUsers[msg.sender] && (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)) {\\n            uint256 feeRate = withdrawFee;\\n            if (_isContract(msg.sender)) {\\n                feeRate = withdrawFeeContract;\\n            }\\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\\n            token.safeTransfer(treasury, currentWithdrawFee);\\n            currentAmount -= currentWithdrawFee;\\n        }\\n\\n        token.safeTransfer(msg.sender, currentAmount);\\n\\n        if (user.shares > 0) {\\n            user.cakeAtLastUserAction = (user.shares * balanceOf()) / totalShares;\\n        } else {\\n            user.cakeAtLastUserAction = 0;\\n        }\\n\\n        user.lastUserActionTime = block.timestamp;\\n\\n        // Update user info in Boost Contract.\\n        updateBoostContractInfo(msg.sender);\\n\\n        emit Withdraw(msg.sender, currentAmount, currentShare);\\n    }\\n\\n    /**\\n     * @notice Withdraw all funds for a user\\n     */\\n    function withdrawAll() external {\\n        withdraw(userInfo[msg.sender].shares);\\n    }\\n\\n    /**\\n     * @notice Harvest pending CAKE tokens from MasterChef\\n     */\\n    function harvest() internal {\\n        uint256 pendingCake = masterchefV2.pendingCake(cakePoolPID, address(this));\\n        if (pendingCake > 0) {\\n            uint256 balBefore = available();\\n            masterchefV2.withdraw(cakePoolPID, 0);\\n            uint256 balAfter = available();\\n            emit Harvest(msg.sender, (balAfter - balBefore));\\n        }\\n    }\\n\\n    /**\\n     * @notice Set admin address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setAdmin(address _admin) external onlyOwner {\\n        require(_admin != address(0), \\\"Cannot be zero address\\\");\\n        admin = _admin;\\n        emit NewAdmin(admin);\\n    }\\n\\n    /**\\n     * @notice Set treasury address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"Cannot be zero address\\\");\\n        treasury = _treasury;\\n        emit NewTreasury(treasury);\\n    }\\n\\n    /**\\n     * @notice Set operator address\\n     * @dev Callable by the contract owner.\\n     */\\n    function setOperator(address _operator) external onlyOwner {\\n        require(_operator != address(0), \\\"Cannot be zero address\\\");\\n        operator = _operator;\\n        emit NewOperator(operator);\\n    }\\n\\n    /**\\n     * @notice Set Boost Contract address\\n     * @dev Callable by the contract admin.\\n     */\\n    function setBoostContract(address _boostContract) external onlyAdmin {\\n        require(_boostContract != address(0), \\\"Cannot be zero address\\\");\\n        boostContract = _boostContract;\\n        emit NewBoostContract(boostContract);\\n    }\\n\\n    /**\\n     * @notice Set VCake Contract address\\n     * @dev Callable by the contract admin.\\n     */\\n    function setVCakeContract(address _VCake) external onlyAdmin {\\n        require(_VCake != address(0), \\\"Cannot be zero address\\\");\\n        VCake = _VCake;\\n        emit NewVCakeContract(VCake);\\n    }\\n\\n    /**\\n     * @notice Set free performance fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setFreePerformanceFeeUser(address _user, bool _free) external onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freePerformanceFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set free overdue fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setOverdueFeeUser(address _user, bool _free) external onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freeOverdueFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set free withdraw fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setWithdrawFeeUser(address _user, bool _free) external onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freeWithdrawFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set performance fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {\\n        require(_performanceFee <= MAX_PERFORMANCE_FEE, \\\"performanceFee cannot be more than MAX_PERFORMANCE_FEE\\\");\\n        performanceFee = _performanceFee;\\n        emit NewPerformanceFee(performanceFee);\\n    }\\n\\n    /**\\n     * @notice Set performance fee for contract\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setPerformanceFeeContract(uint256 _performanceFeeContract) external onlyAdmin {\\n        require(\\n            _performanceFeeContract <= MAX_PERFORMANCE_FEE,\\n            \\\"performanceFee cannot be more than MAX_PERFORMANCE_FEE\\\"\\n        );\\n        performanceFeeContract = _performanceFeeContract;\\n        emit NewPerformanceFeeContract(performanceFeeContract);\\n    }\\n\\n    /**\\n     * @notice Set withdraw fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {\\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, \\\"withdrawFee cannot be more than MAX_WITHDRAW_FEE\\\");\\n        withdrawFee = _withdrawFee;\\n        emit NewWithdrawFee(withdrawFee);\\n    }\\n\\n    /**\\n     * @notice Set overdue fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setOverdueFee(uint256 _overdueFee) external onlyAdmin {\\n        require(_overdueFee <= MAX_OVERDUE_FEE, \\\"overdueFee cannot be more than MAX_OVERDUE_FEE\\\");\\n        overdueFee = _overdueFee;\\n        emit NewOverdueFee(_overdueFee);\\n    }\\n\\n    /**\\n     * @notice Set withdraw fee for contract\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFeeContract(uint256 _withdrawFeeContract) external onlyAdmin {\\n        require(_withdrawFeeContract <= MAX_WITHDRAW_FEE, \\\"withdrawFee cannot be more than MAX_WITHDRAW_FEE\\\");\\n        withdrawFeeContract = _withdrawFeeContract;\\n        emit NewWithdrawFeeContract(withdrawFeeContract);\\n    }\\n\\n    /**\\n     * @notice Set withdraw fee period\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyAdmin {\\n        require(\\n            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,\\n            \\\"withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD\\\"\\n        );\\n        withdrawFeePeriod = _withdrawFeePeriod;\\n        emit NewWithdrawFeePeriod(withdrawFeePeriod);\\n    }\\n\\n    /**\\n     * @notice Set MAX_LOCK_DURATION\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setMaxLockDuration(uint256 _maxLockDuration) external onlyAdmin {\\n        require(\\n            _maxLockDuration <= MAX_LOCK_DURATION_LIMIT,\\n            \\\"MAX_LOCK_DURATION cannot be more than MAX_LOCK_DURATION_LIMIT\\\"\\n        );\\n        MAX_LOCK_DURATION = _maxLockDuration;\\n        emit NewMaxLockDuration(_maxLockDuration);\\n    }\\n\\n    /**\\n     * @notice Set DURATION_FACTOR\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setDurationFactor(uint256 _durationFactor) external onlyAdmin {\\n        require(_durationFactor > 0, \\\"DURATION_FACTOR cannot be zero\\\");\\n        DURATION_FACTOR = _durationFactor;\\n        emit NewDurationFactor(_durationFactor);\\n    }\\n\\n    /**\\n     * @notice Set DURATION_FACTOR_OVERDUE\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setDurationFactorOverdue(uint256 _durationFactorOverdue) external onlyAdmin {\\n        require(_durationFactorOverdue > 0, \\\"DURATION_FACTOR_OVERDUE cannot be zero\\\");\\n        DURATION_FACTOR_OVERDUE = _durationFactorOverdue;\\n        emit NewDurationFactorOverdue(_durationFactorOverdue);\\n    }\\n\\n    /**\\n     * @notice Set UNLOCK_FREE_DURATION\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setUnlockFreeDuration(uint256 _unlockFreeDuration) external onlyAdmin {\\n        require(_unlockFreeDuration > 0, \\\"UNLOCK_FREE_DURATION cannot be zero\\\");\\n        UNLOCK_FREE_DURATION = _unlockFreeDuration;\\n        emit NewUnlockFreeDuration(_unlockFreeDuration);\\n    }\\n\\n    /**\\n     * @notice Set BOOST_WEIGHT\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setBoostWeight(uint256 _boostWeight) external onlyAdmin {\\n        require(_boostWeight <= BOOST_WEIGHT_LIMIT, \\\"BOOST_WEIGHT cannot be more than BOOST_WEIGHT_LIMIT\\\");\\n        BOOST_WEIGHT = _boostWeight;\\n        emit NewBoostWeight(_boostWeight);\\n    }\\n\\n    /**\\n     * @notice Withdraw unexpected tokens sent to the Cake Pool\\n     */\\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\\n        require(_token != address(token), \\\"Token cannot be same as deposit token\\\");\\n\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Trigger stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() external onlyAdmin whenNotPaused {\\n        _pause();\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @notice Return to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() external onlyAdmin whenPaused {\\n        _unpause();\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @notice Calculate Performance fee.\\n     * @param _user: User address\\n     * @return Returns Performance fee.\\n     */\\n    function calculatePerformanceFee(address _user) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares > 0 && !user.locked && !freePerformanceFeeUsers[_user]) {\\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\\n            uint256 totalAmount = (user.shares * pool) / totalShares;\\n            uint256 earnAmount = totalAmount - user.cakeAtLastUserAction;\\n            uint256 feeRate = performanceFee;\\n            if (_isContract(_user)) {\\n                feeRate = performanceFeeContract;\\n            }\\n            uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\\n            return currentPerformanceFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate overdue fee.\\n     * @param _user: User address\\n     * @return Returns Overdue fee.\\n     */\\n    function calculateOverdueFee(address _user) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (\\n            user.shares > 0 &&\\n            user.locked &&\\n            !freeOverdueFeeUsers[_user] &&\\n            ((user.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)\\n        ) {\\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\\n            uint256 currentAmount = (pool * (user.shares)) / totalShares - user.userBoostedShare;\\n            uint256 earnAmount = currentAmount - user.lockedAmount;\\n            uint256 overdueDuration = block.timestamp - user.lockEndTime - UNLOCK_FREE_DURATION;\\n            if (overdueDuration > DURATION_FACTOR_OVERDUE) {\\n                overdueDuration = DURATION_FACTOR_OVERDUE;\\n            }\\n            // Rates are calculated based on the user's overdue duration.\\n            uint256 overdueWeight = (overdueDuration * overdueFee) / DURATION_FACTOR_OVERDUE;\\n            uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\\n            return currentOverdueFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate Performance Fee Or Overdue Fee\\n     * @param _user: User address\\n     * @return Returns  Performance Fee Or Overdue Fee.\\n     */\\n    function calculatePerformanceFeeOrOverdueFee(address _user) internal view returns (uint256) {\\n        return calculatePerformanceFee(_user) + calculateOverdueFee(_user);\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee.\\n     * @param _user: User address\\n     * @param _shares: Number of shares to withdraw\\n     * @return Returns Withdraw fee.\\n     */\\n    function calculateWithdrawFee(address _user, uint256 _shares) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares < _shares) {\\n            _shares = user.shares;\\n        }\\n        if (!freeWithdrawFeeUsers[msg.sender] && (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)) {\\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\\n            uint256 sharesPercent = (_shares * PRECISION_FACTOR) / user.shares;\\n            uint256 currentTotalAmount = (pool * (user.shares)) /\\n                totalShares -\\n                user.userBoostedShare -\\n                calculatePerformanceFeeOrOverdueFee(_user);\\n            uint256 currentAmount = (currentTotalAmount * sharesPercent) / PRECISION_FACTOR;\\n            uint256 feeRate = withdrawFee;\\n            if (_isContract(msg.sender)) {\\n                feeRate = withdrawFeeContract;\\n            }\\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\\n            return currentWithdrawFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculates the total pending rewards that can be harvested\\n     * @return Returns total pending cake rewards\\n     */\\n    function calculateTotalPendingCakeRewards() public view returns (uint256) {\\n        uint256 amount = masterchefV2.pendingCake(cakePoolPID, address(this));\\n        return amount;\\n    }\\n\\n    function getPricePerFullShare() external view returns (uint256) {\\n        return totalShares == 0 ? 1e18 : (((balanceOf() + calculateTotalPendingCakeRewards()) * (1e18)) / totalShares);\\n    }\\n\\n    /**\\n     * @notice Current pool available balance\\n     * @dev The contract puts 100% of the tokens to work.\\n     */\\n    function available() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculates the total underlying tokens\\n     * @dev It includes tokens held by the contract and the boost debt amount.\\n     */\\n    function balanceOf() public view returns (uint256) {\\n        return token.balanceOf(address(this)) + totalBoostDebt;\\n    }\\n\\n    /**\\n     * @notice Checks if address is a contract\\n     */\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\",\"keccak256\":\"0x519218e91003385671721da8b9fe1a96a92a04c368ecb17a723af0b431ec73f9\",\"license\":\"MIT\"},\"contracts/interfaces/IBoostContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBoostContract {\\n    function onCakePoolUpdate(\\n        address _user,\\n        uint256 _lockedAmount,\\n        uint256 _lockedDuration,\\n        uint256 _totalLockedAmount,\\n        uint256 _maxLockDuration\\n    ) external;\\n}\",\"keccak256\":\"0x2aa1f43fe8e5f55b94d299f0a541299ad5e13ab0456d276317082cea6f5efd5c\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMasterChefV2 {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function lpToken(uint256 _pid) external view returns (address);\\n\\n    function poolLength() external view returns (uint256 pools);\\n\\n    function getBoostMultiplier(address _user, uint256 _pid) external view returns (uint256);\\n\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external;\\n}\",\"keccak256\":\"0xde99cfc9fd704eb1e62d71e5ee5c2f7d689ffe553c379ef4195eabcd7e6dc59c\",\"license\":\"MIT\"},\"contracts/interfaces/IVCake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVCake {\\n    function deposit(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _lockDuration\\n    ) external;\\n\\n    function withdraw(address _user) external;\\n}\",\"keccak256\":\"0x354ed930e757475a485c7cc0c898f83cfbdc7b6516ece48b2a57dcbc3b3db091\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405262093a80600e556301e13380600f556301e1338060105562ed4e0060115564e8d4a5100060125560c860135560c8601455600a601555600a60165564e8d4a510006017556203f4806018553480156200005c57600080fd5b5060405162005842380380620058428339810160408190526200007f9162000152565b6200008a33620000e9565b6000805460ff60a01b191690556001600160a01b0395861660805293851660a052600880549386166001600160a01b03199485161790556009805492861692841692909217909155600a805491909416911617909155600b55620001da565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200014f57600080fd5b50565b60008060008060008060c087890312156200016c57600080fd5b8651620001798162000139565b60208801519096506200018c8162000139565b60408801519095506200019f8162000139565b6060880151909450620001b28162000139565b6080880151909350620001c58162000139565b8092505060a087015190509295509295509295565b60805160a0516155e0620002626000396000818161099e01528181610f770152818161103d01528181611df801528181614a060152614ae4015260008181610ac001528181611a6f01528181612202015281816131b401528181613dc001528181613e12015281816141be0152818161429901528181614d3c0152614f6a01526155e06000f3fe608060405234801561001057600080fd5b50600436106105145760003560e01c806387788782116102a1578063cb528b521161016b578063e464c623116100e3578063f2fde38b11610097578063f851a4401161007c578063f851a44014610a9b578063fc0c546a14610abb578063fd253b6414610ae257600080fd5b8063f2fde38b14610a75578063f786b95814610a8857600080fd5b8063e73008bc116100c8578063e73008bc14610a50578063e941fa7814610a59578063f0f4426014610a6257600080fd5b8063e464c62314610a3e578063e4b37ef514610a4757600080fd5b8063def68a9c1161013a578063df10b4e61161011f578063df10b4e614610a02578063dfcedeee14610a0b578063e2bbb15814610a2b57600080fd5b8063def68a9c146109dc578063def7869d146109ef57600080fd5b8063cb528b5214610999578063ccd34cd5146108c8578063d4b0de2f146109c0578063d826ed06146109c957600080fd5b8063acaf88cd11610219578063bc75f4b8116101cd578063beba0fa0116101b2578063beba0fa014610960578063c54d349c14610973578063c6ed51be1461098657600080fd5b8063bc75f4b81461094e578063bdca91651461095757600080fd5b8063b6857844116101fe578063b685784414610621578063b6ac642a14610928578063bb9f408d1461093b57600080fd5b8063acaf88cd1461090c578063b3ab15fb1461091557600080fd5b8063948a03f211610270578063a3639b3911610255578063a3639b39146108e7578063a5834e06146108fa578063aaada5da1461090357600080fd5b8063948a03f2146108c857806395dc14e1146108d457600080fd5b8063877887821461086b57806387d4bda9146108745780638da5cb5b1461089757806393c99e6a146108b557600080fd5b806348a0d754116103e25780636d4710b91161035a578063731ff24a1161030e57806378b4330f116102f357806378b4330f146106545780638456cb591461085b578063853828b61461086357600080fd5b8063731ff24a1461084057806377c7b8fc1461085357600080fd5b806370897b231161033f57806370897b231461081d578063715018a614610830578063722713f71461083857600080fd5b80636d4710b914610801578063704b6c021461080a57600080fd5b8063570ca735116103b15780635c975abb116103965780635c975abb1461079b57806361d027b3146107be578063668679ba146107de57600080fd5b8063570ca7351461077357806358ebceb61461079357600080fd5b806348a0d7541461073c5780634e4de1e9146107445780634f1bfc9e146107575780635521e9bf1461076057600080fd5b80632cfc5f01116104905780633a98ef39116104445780633f4ba83a116104295780633f4ba83a146106ee5780633fec4e32146106f6578063423b93ed1461072957600080fd5b80633a98ef39146106dc5780633eb78874146106e557600080fd5b80632e1a7d4d116104755780632e1a7d4d146106a35780632f6c493c146106b657806335981921146106c957600080fd5b80632cfc5f01146106545780632d19b9821461065e57600080fd5b80631959a002116104e75780631ea30fef116104cc5780631ea30fef146106215780631efac1b81461062e57806329a5cfd61461064157600080fd5b80631959a0021461056857806319ab453c1461060e57600080fd5b806301e813261461051957806305a9f274146105375780630c59696b1461054057806314ff303914610555575b600080fd5b6105246305265c0081565b6040519081526020015b60405180910390f35b610524600d5481565b61055361054e366004615318565b610aef565b005b610553610563366004615318565b610c46565b6105c8610576366004615353565b6003602081905260009182526040909120805460018201546002830154938301546004840154600585015460068601546007870154600890970154959794969495939492939192909160ff9091169089565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c0840152151560e08301526101008201526101200161052e565b61055361061c366004615353565b610d8e565b6105246509184e72a00081565b61055361063c366004615318565b6110db565b61052461064f366004615370565b611224565b61052462093a8081565b60025461067e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161052e565b6105536106b1366004615318565b61136c565b6105536106c4366004615353565b611469565b6105536106d7366004615318565b611643565b61052460075481565b61052460145481565b610553611789565b610719610704366004615353565b60046020526000908152604090205460ff1681565b604051901515815260200161052e565b6105536107373660046153aa565b6118c1565b610524611a3e565b6105536107523660046153aa565b611b03565b610524600f5481565b61055361076e366004615318565b611c80565b600a5461067e9073ffffffffffffffffffffffffffffffffffffffff1681565b610524611da5565b60005474010000000000000000000000000000000000000000900460ff16610719565b60095461067e9073ffffffffffffffffffffffffffffffffffffffff1681565b6107196107ec366004615353565b60066020526000908152604090205460ff1681565b610524600b5481565b610553610818366004615353565b611e72565b61055361082b366004615318565b611fe3565b61055361212b565b6105246121b8565b6105246b204fce5e3e2502611000000081565b610524612286565b6105536122d8565b610553612411565b61052460135481565b610719610882366004615353565b60056020526000908152604090205460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1661067e565b6105536108c3366004615318565b61242a565b61052464e8d4a5100081565b6105246108e2366004615353565b612576565b6105536108f5366004615318565b6126e3565b61052460175481565b610524600e5481565b61052460115481565b610553610923366004615353565b612803565b610553610936366004615318565b612974565b610553610949366004615318565b612abc565b61052460125481565b6105246107d081565b61055361096e3660046153aa565b612c04565b610553610981366004615318565b612d81565b610524610994366004615353565b612ec7565b61067e7f000000000000000000000000000000000000000000000000000000000000000081565b6105246101f481565b6105536109d7366004615353565b612fc0565b6105536109ea366004615353565b613131565b6105536109fd366004615353565b613355565b61052460185481565b60015461067e9073ffffffffffffffffffffffffffffffffffffffff1681565b610553610a393660046153e3565b6134c6565b61052460105481565b61052460165481565b610524600c5481565b61052460155481565b610553610a70366004615353565b6135cb565b610553610a83366004615353565b61373c565b610553610a96366004615318565b613869565b60085461067e9073ffffffffffffffffffffffffffffffffffffffff1681565b61067e7f000000000000000000000000000000000000000000000000000000000000000081565b610524652d79883d200081565b60085473ffffffffffffffffffffffffffffffffffffffff163314610b75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f00000000000000000000000000000000000000000060448201526064015b60405180910390fd5b64e8d4a51000811115610c0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f6f7665726475654665652063616e6e6f74206265206d6f7265207468616e204d60448201527f41585f4f5645524455455f4645450000000000000000000000000000000000006064820152608401610b6c565b60178190556040518181527ff4bd1c5978320077e792afbb3911e8cab1325ce28a6b3e67f9067a1d80692961906020015b60405180910390a150565b60085473ffffffffffffffffffffffffffffffffffffffff163314610cc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b6101f4811115610d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f77697468647261774665652063616e6e6f74206265206d6f7265207468616e2060448201527f4d41585f57495448445241575f464545000000000000000000000000000000006064820152608401610b6c565b60168190556040518181527fcab352e118188b8a2f20a2e8c4ce1241ce2c1740aac4f17c5b0831e65824d8ef90602001610c3b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610e7757600080fd5b505afa158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf9190615405565b905080610f18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f42616c616e6365206d75737420657863656564203000000000000000000000006044820152606401610b6c565b610f3a73ffffffffffffffffffffffffffffffffffffffff83163330846139b3565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063095ea7b390604401602060405180830381600087803b158015610fca57600080fd5b505af1158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611002919061541e565b50600b546040517fe2bbb1580000000000000000000000000000000000000000000000000000000081526004810191909152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e2bbb15890604401600060405180830381600087803b15801561109657600080fd5b505af11580156110aa573d6000803e3d6000fd5b50506040517f57a86f7d14ccde89e22870afe839e3011216827daa9b24e18629f0a1e9d6cc14925060009150a15050565b60085473ffffffffffffffffffffffffffffffffffffffff16331461115c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b62093a808111156111ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f7769746864726177466565506572696f642063616e6e6f74206265206d6f726560448201527f207468616e204d41585f57495448445241575f4645455f504552494f440000006064820152608401610b6c565b60188190556040518181527fb89ddaddb7435be26824cb48d2d0186c9525a2e1ec057abcb502704cdc0686cc90602001610c3b565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805483111561125757805492505b3360009081526005602052604090205460ff1615801561128757506018548160010154611284919061546a565b42105b15611360576000611296611da5565b61129e6121b8565b6112a8919061546a565b82549091506000906112bf64e8d4a5100087615482565b6112c991906154bf565b905060006112d687613a95565b600685015460075486546112ea9087615482565b6112f491906154bf565b6112fe91906154fa565b61130891906154fa565b9050600064e8d4a5100061131c8484615482565b61132691906154bf565b601554909150333b1561133857506016545b60006127106113478385615482565b61135191906154bf565b97506113669650505050505050565b60009150505b92915050565b60005474010000000000000000000000000000000000000000900460ff16156113f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b6c565b6000811161145b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610b6c565b611466816000613ab3565b50565b803373ffffffffffffffffffffffffffffffffffffffff821614806114a55750600a5473ffffffffffffffffffffffffffffffffffffffff1633145b61150b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f74206f70657261746f72206f722063616b65206f776e65720000000000006044820152606401610b6c565b60005474010000000000000000000000000000000000000000900460ff1615611590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020600781015460ff1680156115cc5750428160050154105b611632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616e6e6f7420756e6c6f636b207965740000000000000000000000000000006044820152606401610b6c565b61163e60008085613ec5565b505050565b60085473ffffffffffffffffffffffffffffffffffffffff1633146116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b60008111611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4455524154494f4e5f464143544f525f4f5645524455452063616e6e6f74206260448201527f65207a65726f00000000000000000000000000000000000000000000000000006064820152608401610b6c565b60118190556040518181527f18b6d179114082d7eda9837e15a39eb30032d5f3df00487a67541398f48fabfe90602001610c3b565b60085473ffffffffffffffffffffffffffffffffffffffff16331461180a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b60005474010000000000000000000000000000000000000000900460ff1661188e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b6c565b61189661460e565b6040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60085473ffffffffffffffffffffffffffffffffffffffff163314611942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff82166119bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e6e6f74206265207a65726f2061646472657373000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f3d7902bc9a6665bd7caf4240b834bb805d3cd68256889e9f8d2e40a10be41d4491a35050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015611ac657600080fd5b505afa158015611ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afe9190615405565b905090565b60085473ffffffffffffffffffffffffffffffffffffffff163314611b84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff8216611c01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e6e6f74206265207a65726f2061646472657373000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff821660008181526006602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f3d7902bc9a6665bd7caf4240b834bb805d3cd68256889e9f8d2e40a10be41d4491a35050565b60005474010000000000000000000000000000000000000000900460ff1615611d05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b6c565b6509184e72a0008111611d9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f576974686472617720616d6f756e74206d75737420626520677265617465722060448201527f7468616e204d494e5f57495448445241575f414d4f554e5400000000000000006064820152608401610b6c565b611466600082613ab3565b600b546040517f1175a1dd0000000000000000000000000000000000000000000000000000000081526004810191909152306024820152600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631175a1dd9060440160206040518083038186803b158015611e3a57600080fd5b505afa158015611e4e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113669190615405565b60005473ffffffffffffffffffffffffffffffffffffffff163314611ef3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff8116611f70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e6e6f74206265207a65726f2061646472657373000000000000000000006044820152606401610b6c565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90602001610c3b565b60085473ffffffffffffffffffffffffffffffffffffffff163314612064576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b6107d08111156120f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f706572666f726d616e63654665652063616e6e6f74206265206d6f726520746860448201527f616e204d41585f504552464f524d414e43455f464545000000000000000000006064820152608401610b6c565b60138190556040518181527fefeafcf03e479a9566d7ef321b4816de0ba19cfa3cd0fae2f8c5f4a0afb342c490602001610c3b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146121ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6c565b6121b66000614707565b565b600c546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000919073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561224457600080fd5b505afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c9190615405565b611afe919061546a565b60006007546000146122cb5760075461229d611da5565b6122a56121b8565b6122af919061546a565b6122c190670de0b6b3a7640000615482565b611afe91906154bf565b50670de0b6b3a764000090565b60085473ffffffffffffffffffffffffffffffffffffffff163314612359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b60005474010000000000000000000000000000000000000000900460ff16156123de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b6c565b6123e661477c565b6040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b336000908152600360205260409020546121b69061136c565b60085473ffffffffffffffffffffffffffffffffffffffff1633146124ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b652d79883d2000811115612541576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f424f4f53545f5745494748542063616e6e6f74206265206d6f7265207468616e60448201527f20424f4f53545f5745494748545f4c494d4954000000000000000000000000006064820152608401610b6c565b60128190556040518181527f7666dfff8c3377938e522b4eed3aff079973a976f95969db60a406d49f40da4e90602001610c3b565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081208054158015906125af5750600781015460ff165b80156125e1575073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205460ff16155b80156125fd575042600e5482600501546125fb919061546a565b105b156126da57600061260c611da5565b6126146121b8565b61261e919061546a565b600683015460075484549293506000926126389085615482565b61264291906154bf565b61264c91906154fa565b9050600083600801548261266091906154fa565b90506000600e5485600501544261267791906154fa565b61268191906154fa565b905060115481111561269257506011545b6000601154601754836126a59190615482565b6126af91906154bf565b9050600064e8d4a510006126c38386615482565b6126cd91906154bf565b9998505050505050505050565b50600092915050565b60085473ffffffffffffffffffffffffffffffffffffffff163314612764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b600081116127ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4455524154494f4e5f464143544f522063616e6e6f74206265207a65726f00006044820152606401610b6c565b60108190556040518181527f9478eb023aac0a7d58a4e935377056bf27cf5b72a2300725f831817a8f62fbde90602001610c3b565b60005473ffffffffffffffffffffffffffffffffffffffff163314612884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff8116612901576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e6e6f74206265207a65726f2061646472657373000000000000000000006044820152606401610b6c565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fda12ee837e6978172aaf54b16145ffe08414fd8710092ef033c71b8eb6ec189a90602001610c3b565b60085473ffffffffffffffffffffffffffffffffffffffff1633146129f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b6101f4811115612a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f77697468647261774665652063616e6e6f74206265206d6f7265207468616e2060448201527f4d41585f57495448445241575f464545000000000000000000000000000000006064820152608401610b6c565b60158190556040518181527fd5fe46099fa396290a7f57e36c3c3c8774e2562c18ed5d1dcc0fa75071e03f1d90602001610c3b565b60085473ffffffffffffffffffffffffffffffffffffffff163314612b3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b6107d0811115612bcf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f706572666f726d616e63654665652063616e6e6f74206265206d6f726520746860448201527f616e204d41585f504552464f524d414e43455f464545000000000000000000006064820152608401610b6c565b60148190556040518181527fc5d25457b67b87678c987375af13f6e50beb3ad7bfd009da26766ae986eaa20d90602001610c3b565b60085473ffffffffffffffffffffffffffffffffffffffff163314612c85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff8216612d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e6e6f74206265207a65726f2061646472657373000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff821660008181526005602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f3d7902bc9a6665bd7caf4240b834bb805d3cd68256889e9f8d2e40a10be41d4491a35050565b60085473ffffffffffffffffffffffffffffffffffffffff163314612e02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b60008111612e92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f554e4c4f434b5f465245455f4455524154494f4e2063616e6e6f74206265207a60448201527f65726f00000000000000000000000000000000000000000000000000000000006064820152608401610b6c565b600e8190556040518181527ff84bf2b901cfc02956d4e69556d7448cef4ea13587e7714dba7c6d697091e7ad90602001610c3b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120805415801590612f015750600781015460ff16155b8015612f33575073ffffffffffffffffffffffffffffffffffffffff831660009081526004602052604090205460ff16155b156126da576000612f42611da5565b612f4a6121b8565b612f54919061546a565b90506000600754828460000154612f6b9190615482565b612f7591906154bf565b90506000836002015482612f8991906154fa565b601354909150863b15612f9b57506014545b6000612710612faa8385615482565b612fb491906154bf565b98975050505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff163314613041576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff81166130be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e6e6f74206265207a65726f2061646472657373000000000000000000006044820152606401610b6c565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5352e27b0414343d9438a1c6e9d04c65c7cb4d91f44920afee588f91717893f190602001610c3b565b60085473ffffffffffffffffffffffffffffffffffffffff1633146131b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561328e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f546f6b656e2063616e6e6f742062652073616d65206173206465706f7369742060448201527f746f6b656e0000000000000000000000000000000000000000000000000000006064820152608401610b6c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156132f657600080fd5b505afa15801561330a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332e9190615405565b905061335173ffffffffffffffffffffffffffffffffffffffff83163383614868565b5050565b60085473ffffffffffffffffffffffffffffffffffffffff1633146133d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff8116613453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e6e6f74206265207a65726f2061646472657373000000000000000000006044820152606401610b6c565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f8f49a182922022d9119a1a6aeeca151b4a5665e86bd61c1ff32e152d459558b290602001610c3b565b60005474010000000000000000000000000000000000000000900460ff161561354b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b6c565b600082118061355a5750600081115b6135c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f7468696e6720746f206465706f73697400000000000000000000000000006044820152606401610b6c565b613351828233613ec5565b60005473ffffffffffffffffffffffffffffffffffffffff16331461364c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff81166136c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e6e6f74206265207a65726f2061646472657373000000000000000000006044820152606401610b6c565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fafa147634b29e2c7bd53ce194256b9f41cfb9ba3036f2b822fdd1d965beea08690602001610c3b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146137bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6c565b73ffffffffffffffffffffffffffffffffffffffff8116613860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b6c565b61146681614707565b60085473ffffffffffffffffffffffffffffffffffffffff1633146138ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f0000000000000000000000000000000000000000006044820152606401610b6c565b6305265c0081111561397e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4d41585f4c4f434b5f4455524154494f4e2063616e6e6f74206265206d6f726560448201527f207468616e204d41585f4c4f434b5f4455524154494f4e5f4c494d49540000006064820152608401610b6c565b600f8190556040518181527fcab2f3455b51b6ca5377e84fccd0f890b6f6ca36c02e18b6d36cb34f469fe4fe90602001610c3b565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052613a8f9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526148be565b50505050565b6000613aa082612576565b613aa983612ec7565b611366919061546a565b3360009081526003602052604090208054831115613b2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f576974686472617720616d6f756e7420657863656564732062616c616e6365006044820152606401610b6c565b42816005015410613b9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f5374696c6c20696e206c6f636b000000000000000000000000000000000000006044820152606401610b6c565b60025473ffffffffffffffffffffffffffffffffffffffff1615613c3c576002546040517f51cff8d900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906351cff8d990602401600060405180830381600087803b158015613c2357600080fd5b505af1158015613c37573d6000803e3d6000fd5b505050505b80548390600090613c596b204fce5e3e2502611000000084615482565b613c6391906154bf565b9050613c6d6149ca565b613c7633614ba3565b84158015613c845750600084115b15613cc5576000613c936121b8565b90508060075486613ca49190615482565b613cae91906154bf565b8454909350831115613cbf57835492505b50613cec565b82546b204fce5e3e2502611000000090613cdf9083615482565b613ce991906154bf565b91505b600060075483613cfa6121b8565b613d049190615482565b613d0e91906154bf565b905082846000016000828254613d2491906154fa565b925050819055508260076000828254613d3d91906154fa565b90915550503360009081526005602052604090205460ff16158015613d7257506018548460010154613d6f919061546a565b42105b15613df857601554333b15613d8657506016545b6000612710613d958385615482565b613d9f91906154bf565b600954909150613de99073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911683614868565b613df381846154fa565b925050505b613e3973ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163383614868565b835415613e6b57600754613e4b6121b8565b8554613e579190615482565b613e6191906154bf565b6002850155613e73565b600060028501555b426003850155613e823361500a565b604080518281526020810185905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040902080541580613ef85750600084115b15613f92576509184e72a0008411613f92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4465706f73697420616d6f756e74206d7573742062652067726561746572207460448201527f68616e204d494e5f4445504f5349545f414d4f554e54000000000000000000006064820152608401610b6c565b600581015483904211613ff0578415613fcf574260048301556008820154600d8054600090613fc29084906154fa565b9091555050600060088301555b81600401548260050154613fe391906154fa565b613fed908261546a565b90505b831580614000575062093a808110155b614066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d696e696d756d206c6f636b20706572696f64206973206f6e65207765656b006044820152606401610b6c565b600f548111156140d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4d6178696d756d206c6f636b20706572696f64206578636565646564000000006044820152606401610b6c565b60025473ffffffffffffffffffffffffffffffffffffffff1615614184576002546040517f0efe6a8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018890526044820187905290911690630efe6a8b90606401600060405180830381600087803b15801561416b57600080fd5b505af115801561417f573d6000803e3d6000fd5b505050505b61418c6149ca565b6007546141e957600061419d611a3e565b6009549091506141e79073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911683614868565b505b6141f283614ba3565b831561426957428260050154101561422157426004830181905561421790859061546a565b600583015561423b565b83826005016000828254614235919061546a565b90915550505b6007820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6000806000806142776121b8565b905088156142c5576142c173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001688308c6139b3565b8892505b8554158015906142d95750600786015460ff165b156143525760075486546142ed9083615482565b6142f791906154bf565b9150614303828461546a565b925085600001546007600082825461431b91906154fa565b90915550506000865560048601544214156143525760088601829055600d805483919060009061434c90849061546a565b90915550505b600754156143825761436482826154fa565b6007546143719085615482565b61437b91906154bf565b9350614386565b8293505b856004015486600501541115614514576000601054601254886004015489600501546143b291906154fa565b6143bc9190615482565b6143c691906154bf565b9050600064e8d4a510006143da8784615482565b6143e491906154bf565b90506143f0818761546a565b955085886000016000828254614406919061546a565b909155506000905064e8d4a5100061441e8785615482565b61442891906154bf565b90508089600601600082825461443e919061546a565b9250508190555080600c6000828254614457919061546a565b925050819055508b896008016000828254614472919061546a565b925050819055508b600d600082825461448b919061546a565b925050819055508973ffffffffffffffffffffffffffffffffffffffff167f2b943276e5d747f6f7dd46d3b880d8874cb8d6b9b88ca1903990a2738e7dc7a18a600801548b600001548c600401548d600501546144e891906154fa565b6040805193845260208401929092529082015242606082015260800160405180910390a250505061452e565b83866000016000828254614528919061546a565b90915550505b600089118061453d5750600088115b15614549574260018701555b836007600082825461455b919061546a565b909155505060068601546007546145706121b8565b885461457c9190615482565b61458691906154bf565b61459091906154fa565b60028701554260038701556145a48761500a565b604080518a81526020810186905290810189905242606082015273ffffffffffffffffffffffffffffffffffffffff8816907f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f99060800160405180910390a2505050505050505050565b60005474010000000000000000000000000000000000000000900460ff16614692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b6c565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005474010000000000000000000000000000000000000000900460ff1615614801576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b6c565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586146dd3390565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261163e9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401613a0d565b6000614920826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166151169092919063ffffffff16565b80519091501561163e578080602001905181019061493e919061541e565b61163e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b6c565b600b546040517f1175a1dd00000000000000000000000000000000000000000000000000000000815260048101919091523060248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690631175a1dd9060440160206040518083038186803b158015614a5d57600080fd5b505afa158015614a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a959190615405565b90508015611466576000614aa7611a3e565b600b546040517f441a3e700000000000000000000000000000000000000000000000000000000081526004810191909152600060248201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063441a3e7090604401600060405180830381600087803b158015614b3d57600080fd5b505af1158015614b51573d6000803e3d6000fd5b505050506000614b5f611a3e565b9050337fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba614b8d84846154fa565b60405190815260200160405180910390a2505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040902080541561335157600781015460ff1615614e9857600081600601546007548360000154614bf36121b8565b614bfd9190615482565b614c0791906154bf565b614c1191906154fa565b90508160060154600c6000828254614c2991906154fa565b909155505060006006830181905582546007805491929091614c4c9084906154fa565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205460ff16158015614c97575042600e548360050154614c95919061546a565b105b15614d76576000826008015482614cae91906154fa565b90506000600e54846005015442614cc591906154fa565b614ccf91906154fa565b9050601154811115614ce057506011545b600060115460175483614cf39190615482565b614cfd91906154bf565b9050600064e8d4a51000614d118386615482565b614d1b91906154bf565b600954909150614d659073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911683614868565b614d6f81866154fa565b9450505050505b6000614d806121b8565b90506000600754600014614db657614d9883836154fa565b600754614da59085615482565b614daf91906154bf565b9050614db9565b50815b80845560078054829190600090614dd190849061546a565b90915550506005840154421115614e91576007840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600060048501819055600585018190556008850154600d805491929091614e349084906154fa565b9091555050600060088501556040805184815242602082015273ffffffffffffffffffffffffffffffffffffffff8716917ff7870c5b224cbc19873599e46ccfc7103934650509b1af0c3ce90138377c2004910160405180910390a25b5050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205460ff16613351576000600754614ed26121b8565b8354614ede9190615482565b614ee891906154bf565b9050816000015460076000828254614f0091906154fa565b909155505060008083556002830154614f1990836154fa565b601354909150843b15614f2b57506014545b6000612710614f3a8385615482565b614f4491906154bf565b90508015614fa057600954614f939073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911683614868565b614f9d81856154fa565b93505b6000614faa6121b8565b90506000600754600014614fe057614fc286836154fa565b600754614fcf9088615482565b614fd991906154bf565b9050614fe3565b50845b80875560078054829190600090614ffb90849061546a565b90915550505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16156114665773ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081206004810154600582015491929161506491906154fa565b6001546008840154600d546010546040517fe874fdaf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201949094526044810186905260648101929092526084820152929350169063e874fdaf9060a401600060405180830381600087803b1580156150f957600080fd5b505af115801561510d573d6000803e3d6000fd5b50505050505050565b6060615125848460008561512f565b90505b9392505050565b6060824710156151c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b6c565b73ffffffffffffffffffffffffffffffffffffffff85163b61523f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b6c565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051615268919061553d565b60006040518083038185875af1925050503d80600081146152a5576040519150601f19603f3d011682016040523d82523d6000602084013e6152aa565b606091505b50915091506152ba8282866152c5565b979650505050505050565b606083156152d4575081615128565b8251156152e45782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c9190615559565b60006020828403121561532a57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461146657600080fd5b60006020828403121561536557600080fd5b813561512881615331565b6000806040838503121561538357600080fd5b823561538e81615331565b946020939093013593505050565b801515811461146657600080fd5b600080604083850312156153bd57600080fd5b82356153c881615331565b915060208301356153d88161539c565b809150509250929050565b600080604083850312156153f657600080fd5b50508035926020909101359150565b60006020828403121561541757600080fd5b5051919050565b60006020828403121561543057600080fd5b81516151288161539c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561547d5761547d61543b565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156154ba576154ba61543b565b500290565b6000826154f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008282101561550c5761550c61543b565b500390565b60005b8381101561552c578181015183820152602001615514565b83811115613a8f5750506000910152565b6000825161554f818460208701615511565b9190910192915050565b6020815260008251806020840152615578816040850160208701615511565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220c9ccaf5e6201fdb66876717ce774fc387cdcfb0961326933cc720b32aac650dc64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "available()": {
        "details": "The contract puts 100% of the tokens to work."
      },
      "balanceOf()": {
        "details": "It includes tokens held by the contract and the boost debt amount."
      },
      "calculateOverdueFee(address)": {
        "params": {
          "_user": ": User address"
        },
        "returns": {
          "_0": "Returns Overdue fee."
        }
      },
      "calculatePerformanceFee(address)": {
        "params": {
          "_user": ": User address"
        },
        "returns": {
          "_0": "Returns Performance fee."
        }
      },
      "calculateTotalPendingCakeRewards()": {
        "returns": {
          "_0": "Returns total pending cake rewards"
        }
      },
      "calculateWithdrawFee(address,uint256)": {
        "params": {
          "_shares": ": Number of shares to withdraw",
          "_user": ": User address"
        },
        "returns": {
          "_0": "Returns Withdraw fee."
        }
      },
      "constructor": {
        "params": {
          "_admin": ": address of the admin",
          "_masterchefV2": ": MasterChefV2 contract",
          "_operator": ": address of operator",
          "_pid": ": cake pool ID in MasterChefV2",
          "_token": ": Cake token contract",
          "_treasury": ": address of the treasury (collects fees)"
        }
      },
      "deposit(uint256,uint256)": {
        "details": "Only possible when contract not paused.",
        "params": {
          "_amount": ": number of tokens to deposit (in CAKE)",
          "_lockDuration": ": Token lock duration"
        }
      },
      "init(address)": {
        "params": {
          "dummyToken": "The address of the token to be deposited into MCV2."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only possible when contract not paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAdmin(address)": {
        "details": "Only callable by the contract owner."
      },
      "setBoostContract(address)": {
        "details": "Callable by the contract admin."
      },
      "setBoostWeight(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setDurationFactor(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setDurationFactorOverdue(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setFreePerformanceFeeUser(address,bool)": {
        "details": "Only callable by the contract admin.",
        "params": {
          "_free": ": true:free false:not free",
          "_user": ": User address"
        }
      },
      "setMaxLockDuration(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setOperator(address)": {
        "details": "Callable by the contract owner."
      },
      "setOverdueFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setOverdueFeeUser(address,bool)": {
        "details": "Only callable by the contract admin.",
        "params": {
          "_free": ": true:free false:not free",
          "_user": ": User address"
        }
      },
      "setPerformanceFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setPerformanceFeeContract(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setTreasury(address)": {
        "details": "Only callable by the contract owner."
      },
      "setUnlockFreeDuration(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setVCakeContract(address)": {
        "details": "Callable by the contract admin."
      },
      "setWithdrawFee(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setWithdrawFeeContract(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setWithdrawFeePeriod(uint256)": {
        "details": "Only callable by the contract admin."
      },
      "setWithdrawFeeUser(address,bool)": {
        "details": "Only callable by the contract admin.",
        "params": {
          "_free": ": true:free false:not free",
          "_user": ": User address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(address)": {
        "details": "Only possible when contract not paused.",
        "params": {
          "_user": ": User address"
        }
      },
      "unpause()": {
        "details": "Only possible when contract is paused."
      },
      "withdraw(uint256)": {
        "params": {
          "_shares": ": Number of shares to withdraw"
        }
      },
      "withdrawByAmount(uint256)": {
        "params": {
          "_amount": ": Number of amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "available()": {
        "notice": "Current pool available balance"
      },
      "balanceOf()": {
        "notice": "Calculates the total underlying tokens"
      },
      "calculateOverdueFee(address)": {
        "notice": "Calculate overdue fee."
      },
      "calculatePerformanceFee(address)": {
        "notice": "Calculate Performance fee."
      },
      "calculateTotalPendingCakeRewards()": {
        "notice": "Calculates the total pending rewards that can be harvested"
      },
      "calculateWithdrawFee(address,uint256)": {
        "notice": "Calculate withdraw fee."
      },
      "constructor": {
        "notice": "Constructor"
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit funds into the Cake Pool."
      },
      "inCaseTokensGetStuck(address)": {
        "notice": "Withdraw unexpected tokens sent to the Cake Pool"
      },
      "init(address)": {
        "notice": "Deposits a dummy token to `MASTER_CHEF` MCV2. It will transfer all the `dummyToken` in the tx sender address."
      },
      "pause()": {
        "notice": "Trigger stopped state"
      },
      "setAdmin(address)": {
        "notice": "Set admin address"
      },
      "setBoostContract(address)": {
        "notice": "Set Boost Contract address"
      },
      "setBoostWeight(uint256)": {
        "notice": "Set BOOST_WEIGHT"
      },
      "setDurationFactor(uint256)": {
        "notice": "Set DURATION_FACTOR"
      },
      "setDurationFactorOverdue(uint256)": {
        "notice": "Set DURATION_FACTOR_OVERDUE"
      },
      "setFreePerformanceFeeUser(address,bool)": {
        "notice": "Set free performance fee address"
      },
      "setMaxLockDuration(uint256)": {
        "notice": "Set MAX_LOCK_DURATION"
      },
      "setOperator(address)": {
        "notice": "Set operator address"
      },
      "setOverdueFee(uint256)": {
        "notice": "Set overdue fee"
      },
      "setOverdueFeeUser(address,bool)": {
        "notice": "Set free overdue fee address"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Set performance fee"
      },
      "setPerformanceFeeContract(uint256)": {
        "notice": "Set performance fee for contract"
      },
      "setTreasury(address)": {
        "notice": "Set treasury address"
      },
      "setUnlockFreeDuration(uint256)": {
        "notice": "Set UNLOCK_FREE_DURATION"
      },
      "setVCakeContract(address)": {
        "notice": "Set VCake Contract address"
      },
      "setWithdrawFee(uint256)": {
        "notice": "Set withdraw fee"
      },
      "setWithdrawFeeContract(uint256)": {
        "notice": "Set withdraw fee for contract"
      },
      "setWithdrawFeePeriod(uint256)": {
        "notice": "Set withdraw fee period"
      },
      "setWithdrawFeeUser(address,bool)": {
        "notice": "Set free withdraw fee address"
      },
      "unlock(address)": {
        "notice": "Unlock user cake funds."
      },
      "unpause()": {
        "notice": "Return to normal state"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw funds from the Cake Pool."
      },
      "withdrawAll()": {
        "notice": "Withdraw all funds for a user"
      },
      "withdrawByAmount(uint256)": {
        "notice": "Withdraw funds from the Cake Pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 898,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "boostContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 900,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "VCake",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 905,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserInfo)890_storage)"
      },
      {
        "astId": 909,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "freePerformanceFeeUsers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 913,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "freeWithdrawFeeUsers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 917,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "freeOverdueFeeUsers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 919,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "totalShares",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 921,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "admin",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 923,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "treasury",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 925,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "operator",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 927,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "cakePoolPID",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 929,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "totalBoostDebt",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 931,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "totalLockedAmount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 971,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "UNLOCK_FREE_DURATION",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 974,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "MAX_LOCK_DURATION",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 977,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "DURATION_FACTOR",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 980,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "DURATION_FACTOR_OVERDUE",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 985,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "BOOST_WEIGHT",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 988,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "performanceFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 991,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "performanceFeeContract",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 994,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 997,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "withdrawFeeContract",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 1002,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "overdueFee",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 1005,
        "contract": "contracts/CakePool.sol:CakePool",
        "label": "withdrawFeePeriod",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)890_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CakePool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)890_storage"
      },
      "t_struct(UserInfo)890_storage": {
        "encoding": "inplace",
        "label": "struct CakePool.UserInfo",
        "members": [
          {
            "astId": 873,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 875,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "lastDepositedTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 877,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "cakeAtLastUserAction",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 879,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "lastUserActionTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 881,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "lockStartTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 883,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "lockEndTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 885,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "userBoostedShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 887,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "locked",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 889,
            "contract": "contracts/CakePool.sol:CakePool",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}