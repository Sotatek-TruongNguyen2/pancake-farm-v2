{
  "address": "0xE4Ef66Db4a35E557526c339684804537d200895a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositByProxy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdrawByProxy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawByProxy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FARM_BOOSTER_PROXY_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmBooster",
      "outputs": [
        {
          "internalType": "contract IFarmBooster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmBooster",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_masterchefV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cakeToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lpApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchefV2",
      "outputs": [
        {
          "internalType": "contract IMasterChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99d4b01533ac016dbe3abd65f1d2afcfb5f475406915483137ab6b78624085bb",
  "receipt": {
    "to": null,
    "from": "0xA8c344b867d0697197d4Df75c807cf023f537b38",
    "contractAddress": "0xE4Ef66Db4a35E557526c339684804537d200895a",
    "transactionIndex": 8,
    "gasUsed": "1466535",
    "logsBloom": "0x
    "blockHash": "0x74a7f7754b24a25558eb6e06c8ae9e443c5df88cc3a355ac9a9c610f9e112353",
    "transactionHash": "0x99d4b01533ac016dbe3abd65f1d2afcfb5f475406915483137ab6b78624085bb",
    "logs": [],
    "blockNumber": 26194044,
    "cumulativeGasUsed": "2196881",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fd21b0eb6b62d9c70847699da4cb3d7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositByProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawByProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawByProxy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FARM_BOOSTER_PROXY_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmBooster\",\"outputs\":[{\"internalType\":\"contract IFarmBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterchefV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefV2\",\"outputs\":[{\"internalType\":\"contract IMasterChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256)\":{\"details\":\"It can only be called by admin.\",\"params\":{\"_amount\":\"Amount of LP tokens to deposit.\",\"_pid\":\"The id of the pool.\"}},\"emergencyWithdraw(uint256)\":{\"details\":\"It can only be called by admin.\",\"params\":{\"_pid\":\"The id of the pool.\"}},\"initialize(address,address,address,address)\":{\"details\":\"It can only be called once.\",\"params\":{\"_admin\":\": the admin address\",\"_cakeToken\":\": the address of the cake token\",\"_farmBooster\":\": the farm booster address\",\"_masterchefV2\":\": the address of the Masterchef V2\"}},\"withdraw(uint256,uint256)\":{\"details\":\"It can only be called by admin.\",\"params\":{\"_amount\":\"Amount of LP tokens to withdraw.\",\"_pid\":\"The id of the pool.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit LP tokens to pool.\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about the rewards. EMERGENCY ONLY.\"},\"initialize(address,address,address,address)\":{\"notice\":\"It initializes the contract\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw LP tokens from pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FarmBoosterProxy.sol\":\"FarmBoosterProxy\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/FarmBoosterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './interfaces/IMasterChefV2.sol';\\nimport './interfaces/IFarmBooster.sol';\\n\\ncontract FarmBoosterProxy is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // The address of the farm booster proxy factory\\n    address public immutable FARM_BOOSTER_PROXY_FACTORY;\\n    IMasterChefV2 public masterchefV2;\\n    IERC20 public cakeToken;\\n    IFarmBooster public farmBooster;\\n\\n    address public admin;\\n    // Whether it is initialized\\n    bool public isInitialized;\\n    // Record whether lp was approved\\n    mapping(address => bool) public lpApproved;\\n\\n    event DepositByProxy(address indexed user, address indexed proxy, uint256 indexed pid, uint256 amount);\\n    event WithdrawByProxy(address indexed user, address indexed proxy, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdrawByProxy(address indexed user, address indexed proxy, uint256 indexed pid);\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor() {\\n        FARM_BOOSTER_PROXY_FACTORY = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, 'admin: wut?');\\n        _;\\n    }\\n\\n    /**\\n     * @notice It initializes the contract\\n     * @dev It can only be called once.\\n     * @param _admin: the admin address\\n     * @param _farmBooster: the farm booster address\\n     * @param _masterchefV2: the address of the Masterchef V2\\n     * @param _cakeToken: the address of the cake token\\n     */\\n    function initialize(address _admin, address _farmBooster, address _masterchefV2, address _cakeToken) external {\\n        require(!isInitialized, 'Operations: Already initialized');\\n        require(msg.sender == FARM_BOOSTER_PROXY_FACTORY, 'Operations: Not factory');\\n\\n        // Make this contract initialized\\n        isInitialized = true;\\n        admin = _admin;\\n        farmBooster = IFarmBooster(_farmBooster);\\n        masterchefV2 = IMasterChefV2(_masterchefV2);\\n        cakeToken = IERC20(_cakeToken);\\n    }\\n\\n    /**\\n     * @notice Deposit LP tokens to pool.\\n     * @dev It can only be called by admin.\\n     * @param _pid The id of the pool.\\n     * @param _amount Amount of LP tokens to deposit.\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant onlyAdmin {\\n        uint256 poolLength = masterchefV2.poolLength();\\n        require(_pid < poolLength, 'Pool is not exist');\\n        address lpAddress = masterchefV2.lpToken(_pid);\\n        IERC20(lpAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n        if (!lpApproved[lpAddress]) {\\n            IERC20(lpAddress).approve(address(masterchefV2), type(uint256).max);\\n            lpApproved[lpAddress] = true;\\n        }\\n        masterchefV2.deposit(_pid, _amount);\\n        harvestCake();\\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\\n        emit DepositByProxy(msg.sender, address(this), _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw LP tokens from pool.\\n     * @dev It can only be called by admin.\\n     * @param _pid The id of the pool.\\n     * @param _amount Amount of LP tokens to withdraw.\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant onlyAdmin {\\n        uint256 poolLength = masterchefV2.poolLength();\\n        require(_pid < poolLength, 'Pool is not exist');\\n        masterchefV2.withdraw(_pid, _amount);\\n        address lpAddress = masterchefV2.lpToken(_pid);\\n        IERC20(lpAddress).safeTransfer(msg.sender, _amount);\\n        harvestCake();\\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\\n        emit WithdrawByProxy(msg.sender, address(this), _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\n     * @dev It can only be called by admin.\\n     * @param _pid The id of the pool.\\n     */\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant onlyAdmin {\\n        uint256 poolLength = masterchefV2.poolLength();\\n        require(_pid < poolLength, 'Pool is not exist');\\n        masterchefV2.emergencyWithdraw(_pid);\\n        address lpAddress = masterchefV2.lpToken(_pid);\\n        IERC20(lpAddress).safeTransfer(msg.sender, IERC20(lpAddress).balanceOf(address(this)));\\n        harvestCake();\\n        farmBooster.updatePoolBoostMultiplier(msg.sender, _pid);\\n        emit EmergencyWithdrawByProxy(msg.sender, address(this), _pid);\\n    }\\n\\n    function harvestCake() internal {\\n        uint256 cakeBalance = cakeToken.balanceOf(address(this));\\n        if (cakeBalance > 0) {\\n            cakeToken.safeTransfer(msg.sender, cakeBalance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b122b8660ded1288dee110a52a27864647eecea60f059b4b85f6841c66ae133\",\"license\":\"MIT\"},\"contracts/interfaces/IFarmBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFarmBooster {\\n    function onCakePoolUpdate(\\n        address _user,\\n        uint256 _lockedAmount,\\n        uint256 _lockedDuration,\\n        uint256 _totalLockedAmount,\\n        uint256 _maxLockDuration\\n    ) external;\\n\\n    function updatePoolBoostMultiplier(address _user, uint256 _pid) external;\\n\\n    function setProxy(address _user, address _proxy) external;\\n\\n    function isBoosterPool(address _user, uint256 _pid) external view returns (bool);\\n}\",\"keccak256\":\"0x26bafd8650799197d09afa131cf4e0ae4fd35ac8364ab960e6a1a01b0f766401\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMasterChefV2 {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function lpToken(uint256 _pid) external view returns (address);\\n\\n    function poolLength() external view returns (uint256 pools);\\n\\n    function getBoostMultiplier(address _user, uint256 _pid) external view returns (uint256);\\n\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external;\\n}\",\"keccak256\":\"0xde99cfc9fd704eb1e62d71e5ee5c2f7d689ffe553c379ef4195eabcd7e6dc59c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060016000553360805260805161197661003c60003960008181610167015261112e01526119766000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638904bf2f11610081578063f851a4401161005b578063f851a440146101ef578063f8c8765e1461020f578063fbcdbd0e1461022257600080fd5b80638904bf2f1461019c578063cb528b52146101bc578063e2bbb158146101dc57600080fd5b8063441a3e70116100b2578063441a3e701461014d57806351035703146101625780635312ea8e1461018957600080fd5b80630643aae1146100ce578063392e53cd14610118575b600080fd5b6003546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60045461013d9074010000000000000000000000000000000000000000900460ff1681565b604051901515815260200161010f565b61016061015b366004611779565b610245565b005b6100ee7f000000000000000000000000000000000000000000000000000000000000000081565b61016061019736600461179b565b610675565b6002546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b6001546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b6101606101ea366004611779565b610b2e565b6004546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b61016061021d3660046117d6565b611091565b61013d610230366004611832565b60056020526000908152604090205460ff1681565b600260005414156102b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005560045473ffffffffffffffffffffffffffffffffffffffff16331461033d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f00000000000000000000000000000000000000000060448201526064016102ae565b600154604080517f081e3eda000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163081e3eda916004808301926020929190829003018186803b1580156103a857600080fd5b505afa1580156103bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e0919061184f565b905080831061044b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f506f6f6c206973206e6f7420657869737400000000000000000000000000000060448201526064016102ae565b6001546040517f441a3e70000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063441a3e7090604401600060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b50506001546040517f78ed5d1f000000000000000000000000000000000000000000000000000000008152600481018790526000935073ffffffffffffffffffffffffffffffffffffffff90911691506378ed5d1f9060240160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611868565b905061059e73ffffffffffffffffffffffffffffffffffffffff8216338561125d565b6105a6611336565b6003546040517f17adb6ee0000000000000000000000000000000000000000000000000000000081523360048201526024810186905273ffffffffffffffffffffffffffffffffffffffff909116906317adb6ee90604401600060405180830381600087803b15801561061857600080fd5b505af115801561062c573d6000803e3d6000fd5b505060405185815286925030915033907fa8c1f92a8228d8f30d30e0539f7256c2847eaf35775bdc0a5a9c0a5a066f31d3906020015b60405180910390a4505060016000555050565b600260005414156106e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102ae565b600260005560045473ffffffffffffffffffffffffffffffffffffffff163314610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f00000000000000000000000000000000000000000060448201526064016102ae565b600154604080517f081e3eda000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163081e3eda916004808301926020929190829003018186803b1580156107d357600080fd5b505afa1580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b919061184f565b9050808210610876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f506f6f6c206973206e6f7420657869737400000000000000000000000000000060448201526064016102ae565b6001546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff90911690635312ea8e90602401600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b50506001546040517f78ed5d1f000000000000000000000000000000000000000000000000000000008152600481018690526000935073ffffffffffffffffffffffffffffffffffffffff90911691506378ed5d1f9060240160206040518083038186803b15801561096757600080fd5b505afa15801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190611868565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909150610a6390339073ffffffffffffffffffffffffffffffffffffffff8416906370a082319060240160206040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a45919061184f565b73ffffffffffffffffffffffffffffffffffffffff8416919061125d565b610a6b611336565b6003546040517f17adb6ee0000000000000000000000000000000000000000000000000000000081523360048201526024810185905273ffffffffffffffffffffffffffffffffffffffff909116906317adb6ee90604401600060405180830381600087803b158015610add57600080fd5b505af1158015610af1573d6000803e3d6000fd5b505060405185925030915033907f238154946c0c149f8f44d71bfa79cf891af27a2567d540447b44c7c532529e3290600090a45050600160005550565b60026000541415610b9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102ae565b600260005560045473ffffffffffffffffffffffffffffffffffffffff163314610c21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f00000000000000000000000000000000000000000060448201526064016102ae565b600154604080517f081e3eda000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163081e3eda916004808301926020929190829003018186803b158015610c8c57600080fd5b505afa158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc4919061184f565b9050808310610d2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f506f6f6c206973206e6f7420657869737400000000000000000000000000000060448201526064016102ae565b6001546040517f78ed5d1f0000000000000000000000000000000000000000000000000000000081526004810185905260009173ffffffffffffffffffffffffffffffffffffffff16906378ed5d1f9060240160206040518083038186803b158015610d9a57600080fd5b505afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190611868565b9050610df673ffffffffffffffffffffffffffffffffffffffff8216333086611407565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090205460ff16610f3e576001546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248201529082169063095ea7b390604401602060405180830381600087803b158015610eb657600080fd5b505af1158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190611885565b5073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6001546040517fe2bbb158000000000000000000000000000000000000000000000000000000008152600481018690526024810185905273ffffffffffffffffffffffffffffffffffffffff9091169063e2bbb15890604401600060405180830381600087803b158015610fb157600080fd5b505af1158015610fc5573d6000803e3d6000fd5b50505050610fd1611336565b6003546040517f17adb6ee0000000000000000000000000000000000000000000000000000000081523360048201526024810186905273ffffffffffffffffffffffffffffffffffffffff909116906317adb6ee90604401600060405180830381600087803b15801561104357600080fd5b505af1158015611057573d6000803e3d6000fd5b505060405185815286925030915033907f138d30356a982952b65b72a90f5ee823874132ec8dd8b2fa5c42499228670fa690602001610662565b60045474010000000000000000000000000000000000000000900460ff1615611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f7065726174696f6e733a20416c726561647920696e697469616c697a65640060448201526064016102ae565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146111b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f7065726174696f6e733a204e6f7420666163746f727900000000000000000060448201526064016102ae565b6004805473ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffff0000000000000000000000000000000000000000009091161774010000000000000000000000000000000000000000179055600380549385167fffffffffffffffffffffffff0000000000000000000000000000000000000000948516179055600180549285169284169290921790915560028054919093169116179055565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113319084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261146b565b505050565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156113a057600080fd5b505afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d8919061184f565b90508015611404576002546114049073ffffffffffffffffffffffffffffffffffffffff16338361125d565b50565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526114659085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016112af565b50505050565b60006114cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115779092919063ffffffff16565b80519091501561133157808060200190518101906114eb9190611885565b611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ae565b60606115868484600085611590565b90505b9392505050565b606082471015611622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ae565b73ffffffffffffffffffffffffffffffffffffffff85163b6116a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ae565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116c991906118d3565b60006040518083038185875af1925050503d8060008114611706576040519150601f19603f3d011682016040523d82523d6000602084013e61170b565b606091505b509150915061171b828286611726565b979650505050505050565b60608315611735575081611589565b8251156117455782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ae91906118ef565b6000806040838503121561178c57600080fd5b50508035926020909101359150565b6000602082840312156117ad57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461140457600080fd5b600080600080608085870312156117ec57600080fd5b84356117f7816117b4565b93506020850135611807816117b4565b92506040850135611817816117b4565b91506060850135611827816117b4565b939692955090935050565b60006020828403121561184457600080fd5b8135611589816117b4565b60006020828403121561186157600080fd5b5051919050565b60006020828403121561187a57600080fd5b8151611589816117b4565b60006020828403121561189757600080fd5b8151801515811461158957600080fd5b60005b838110156118c25781810151838201526020016118aa565b838111156114655750506000910152565b600082516118e58184602087016118a7565b9190910192915050565b602081526000825180602084015261190e8160408501602087016118a7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122022b1275feb62cf81f51efa028e848d425b03f0e2e2e7c39e0e5b9ee22202516364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80638904bf2f11610081578063f851a4401161005b578063f851a440146101ef578063f8c8765e1461020f578063fbcdbd0e1461022257600080fd5b80638904bf2f1461019c578063cb528b52146101bc578063e2bbb158146101dc57600080fd5b8063441a3e70116100b2578063441a3e701461014d57806351035703146101625780635312ea8e1461018957600080fd5b80630643aae1146100ce578063392e53cd14610118575b600080fd5b6003546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60045461013d9074010000000000000000000000000000000000000000900460ff1681565b604051901515815260200161010f565b61016061015b366004611779565b610245565b005b6100ee7f000000000000000000000000000000000000000000000000000000000000000081565b61016061019736600461179b565b610675565b6002546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b6001546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b6101606101ea366004611779565b610b2e565b6004546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b61016061021d3660046117d6565b611091565b61013d610230366004611832565b60056020526000908152604090205460ff1681565b600260005414156102b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005560045473ffffffffffffffffffffffffffffffffffffffff16331461033d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f00000000000000000000000000000000000000000060448201526064016102ae565b600154604080517f081e3eda000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163081e3eda916004808301926020929190829003018186803b1580156103a857600080fd5b505afa1580156103bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e0919061184f565b905080831061044b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f506f6f6c206973206e6f7420657869737400000000000000000000000000000060448201526064016102ae565b6001546040517f441a3e70000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063441a3e7090604401600060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b50506001546040517f78ed5d1f000000000000000000000000000000000000000000000000000000008152600481018790526000935073ffffffffffffffffffffffffffffffffffffffff90911691506378ed5d1f9060240160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611868565b905061059e73ffffffffffffffffffffffffffffffffffffffff8216338561125d565b6105a6611336565b6003546040517f17adb6ee0000000000000000000000000000000000000000000000000000000081523360048201526024810186905273ffffffffffffffffffffffffffffffffffffffff909116906317adb6ee90604401600060405180830381600087803b15801561061857600080fd5b505af115801561062c573d6000803e3d6000fd5b505060405185815286925030915033907fa8c1f92a8228d8f30d30e0539f7256c2847eaf35775bdc0a5a9c0a5a066f31d3906020015b60405180910390a4505060016000555050565b600260005414156106e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102ae565b600260005560045473ffffffffffffffffffffffffffffffffffffffff163314610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f00000000000000000000000000000000000000000060448201526064016102ae565b600154604080517f081e3eda000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163081e3eda916004808301926020929190829003018186803b1580156107d357600080fd5b505afa1580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b919061184f565b9050808210610876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f506f6f6c206973206e6f7420657869737400000000000000000000000000000060448201526064016102ae565b6001546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff90911690635312ea8e90602401600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b50506001546040517f78ed5d1f000000000000000000000000000000000000000000000000000000008152600481018690526000935073ffffffffffffffffffffffffffffffffffffffff90911691506378ed5d1f9060240160206040518083038186803b15801561096757600080fd5b505afa15801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190611868565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909150610a6390339073ffffffffffffffffffffffffffffffffffffffff8416906370a082319060240160206040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a45919061184f565b73ffffffffffffffffffffffffffffffffffffffff8416919061125d565b610a6b611336565b6003546040517f17adb6ee0000000000000000000000000000000000000000000000000000000081523360048201526024810185905273ffffffffffffffffffffffffffffffffffffffff909116906317adb6ee90604401600060405180830381600087803b158015610add57600080fd5b505af1158015610af1573d6000803e3d6000fd5b505060405185925030915033907f238154946c0c149f8f44d71bfa79cf891af27a2567d540447b44c7c532529e3290600090a45050600160005550565b60026000541415610b9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102ae565b600260005560045473ffffffffffffffffffffffffffffffffffffffff163314610c21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f61646d696e3a207775743f00000000000000000000000000000000000000000060448201526064016102ae565b600154604080517f081e3eda000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163081e3eda916004808301926020929190829003018186803b158015610c8c57600080fd5b505afa158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc4919061184f565b9050808310610d2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f506f6f6c206973206e6f7420657869737400000000000000000000000000000060448201526064016102ae565b6001546040517f78ed5d1f0000000000000000000000000000000000000000000000000000000081526004810185905260009173ffffffffffffffffffffffffffffffffffffffff16906378ed5d1f9060240160206040518083038186803b158015610d9a57600080fd5b505afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190611868565b9050610df673ffffffffffffffffffffffffffffffffffffffff8216333086611407565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090205460ff16610f3e576001546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248201529082169063095ea7b390604401602060405180830381600087803b158015610eb657600080fd5b505af1158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190611885565b5073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6001546040517fe2bbb158000000000000000000000000000000000000000000000000000000008152600481018690526024810185905273ffffffffffffffffffffffffffffffffffffffff9091169063e2bbb15890604401600060405180830381600087803b158015610fb157600080fd5b505af1158015610fc5573d6000803e3d6000fd5b50505050610fd1611336565b6003546040517f17adb6ee0000000000000000000000000000000000000000000000000000000081523360048201526024810186905273ffffffffffffffffffffffffffffffffffffffff909116906317adb6ee90604401600060405180830381600087803b15801561104357600080fd5b505af1158015611057573d6000803e3d6000fd5b505060405185815286925030915033907f138d30356a982952b65b72a90f5ee823874132ec8dd8b2fa5c42499228670fa690602001610662565b60045474010000000000000000000000000000000000000000900460ff1615611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f7065726174696f6e733a20416c726561647920696e697469616c697a65640060448201526064016102ae565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146111b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f7065726174696f6e733a204e6f7420666163746f727900000000000000000060448201526064016102ae565b6004805473ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffff0000000000000000000000000000000000000000009091161774010000000000000000000000000000000000000000179055600380549385167fffffffffffffffffffffffff0000000000000000000000000000000000000000948516179055600180549285169284169290921790915560028054919093169116179055565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113319084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261146b565b505050565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156113a057600080fd5b505afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d8919061184f565b90508015611404576002546114049073ffffffffffffffffffffffffffffffffffffffff16338361125d565b50565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526114659085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016112af565b50505050565b60006114cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115779092919063ffffffff16565b80519091501561133157808060200190518101906114eb9190611885565b611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ae565b60606115868484600085611590565b90505b9392505050565b606082471015611622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ae565b73ffffffffffffffffffffffffffffffffffffffff85163b6116a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ae565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116c991906118d3565b60006040518083038185875af1925050503d8060008114611706576040519150601f19603f3d011682016040523d82523d6000602084013e61170b565b606091505b509150915061171b828286611726565b979650505050505050565b60608315611735575081611589565b8251156117455782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ae91906118ef565b6000806040838503121561178c57600080fd5b50508035926020909101359150565b6000602082840312156117ad57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461140457600080fd5b600080600080608085870312156117ec57600080fd5b84356117f7816117b4565b93506020850135611807816117b4565b92506040850135611817816117b4565b91506060850135611827816117b4565b939692955090935050565b60006020828403121561184457600080fd5b8135611589816117b4565b60006020828403121561186157600080fd5b5051919050565b60006020828403121561187a57600080fd5b8151611589816117b4565b60006020828403121561189757600080fd5b8151801515811461158957600080fd5b60005b838110156118c25781810151838201526020016118aa565b838111156114655750506000910152565b600082516118e58184602087016118a7565b9190910192915050565b602081526000825180602084015261190e8160408501602087016118a7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122022b1275feb62cf81f51efa028e848d425b03f0e2e2e7c39e0e5b9ee22202516364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256)": {
        "details": "It can only be called by admin.",
        "params": {
          "_amount": "Amount of LP tokens to deposit.",
          "_pid": "The id of the pool."
        }
      },
      "emergencyWithdraw(uint256)": {
        "details": "It can only be called by admin.",
        "params": {
          "_pid": "The id of the pool."
        }
      },
      "initialize(address,address,address,address)": {
        "details": "It can only be called once.",
        "params": {
          "_admin": ": the admin address",
          "_cakeToken": ": the address of the cake token",
          "_farmBooster": ": the farm booster address",
          "_masterchefV2": ": the address of the Masterchef V2"
        }
      },
      "withdraw(uint256,uint256)": {
        "details": "It can only be called by admin.",
        "params": {
          "_amount": "Amount of LP tokens to withdraw.",
          "_pid": "The id of the pool."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit LP tokens to pool."
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about the rewards. EMERGENCY ONLY."
      },
      "initialize(address,address,address,address)": {
        "notice": "It initializes the contract"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw LP tokens from pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 207,
        "contract": "contracts/FarmBoosterProxy.sol:FarmBoosterProxy",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4750,
        "contract": "contracts/FarmBoosterProxy.sol:FarmBoosterProxy",
        "label": "masterchefV2",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMasterChefV2)5571"
      },
      {
        "astId": 4753,
        "contract": "contracts/FarmBoosterProxy.sol:FarmBoosterProxy",
        "label": "cakeToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)314"
      },
      {
        "astId": 4756,
        "contract": "contracts/FarmBoosterProxy.sol:FarmBoosterProxy",
        "label": "farmBooster",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFarmBooster)5497"
      },
      {
        "astId": 4758,
        "contract": "contracts/FarmBoosterProxy.sol:FarmBoosterProxy",
        "label": "admin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4760,
        "contract": "contracts/FarmBoosterProxy.sol:FarmBoosterProxy",
        "label": "isInitialized",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 4764,
        "contract": "contracts/FarmBoosterProxy.sol:FarmBoosterProxy",
        "label": "lpApproved",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)314": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFarmBooster)5497": {
        "encoding": "inplace",
        "label": "contract IFarmBooster",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChefV2)5571": {
        "encoding": "inplace",
        "label": "contract IMasterChefV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}